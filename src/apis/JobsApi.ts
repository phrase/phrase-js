/* tslint:disable */
/* eslint-disable */
/**
 * Phrase API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Job,
    JobFromJSON,
    JobToJSON,
    JobCompleteParameters,
    JobCompleteParametersFromJSON,
    JobCompleteParametersToJSON,
    JobCreateParameters,
    JobCreateParametersFromJSON,
    JobCreateParametersToJSON,
    JobDetails,
    JobDetailsFromJSON,
    JobDetailsToJSON,
    JobKeysCreateParameters,
    JobKeysCreateParametersFromJSON,
    JobKeysCreateParametersToJSON,
    JobReopenParameters,
    JobReopenParametersFromJSON,
    JobReopenParametersToJSON,
    JobStartParameters,
    JobStartParametersFromJSON,
    JobStartParametersToJSON,
    JobUpdateParameters,
    JobUpdateParametersFromJSON,
    JobUpdateParametersToJSON,
} from '../models';

export interface JobCompleteRequest {
    projectId: string;
    id: string;
    jobCompleteParameters: JobCompleteParameters;
    xPhraseAppOTP?: string;
}

export interface JobCreateRequest {
    projectId: string;
    jobCreateParameters: JobCreateParameters;
    xPhraseAppOTP?: string;
}

export interface JobDeleteRequest {
    projectId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
}

export interface JobKeysCreateRequest {
    projectId: string;
    id: string;
    jobKeysCreateParameters: JobKeysCreateParameters;
    xPhraseAppOTP?: string;
}

export interface JobKeysDeleteRequest {
    projectId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
    translationKeyIds?: Array<string>;
}

export interface JobReopenRequest {
    projectId: string;
    id: string;
    jobReopenParameters: JobReopenParameters;
    xPhraseAppOTP?: string;
}

export interface JobShowRequest {
    projectId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
}

export interface JobStartRequest {
    projectId: string;
    id: string;
    jobStartParameters: JobStartParameters;
    xPhraseAppOTP?: string;
}

export interface JobUpdateRequest {
    projectId: string;
    id: string;
    jobUpdateParameters: JobUpdateParameters;
    xPhraseAppOTP?: string;
}

export interface JobsListRequest {
    projectId: string;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
    branch?: string;
    ownedBy?: string;
    assignedTo?: string;
    state?: string;
}

/**
 * 
 */
export class JobsApi extends runtime.BaseAPI {

    /**
     * Mark a job as completed.
     * Complete a job
     */
    async jobCompleteRaw(requestParameters: JobCompleteRequest): Promise<runtime.ApiResponse<JobDetails>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobComplete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling jobComplete.');
        }

        if (requestParameters.jobCompleteParameters === null || requestParameters.jobCompleteParameters === undefined) {
            throw new runtime.RequiredError('jobCompleteParameters','Required parameter requestParameters.jobCompleteParameters was null or undefined when calling jobComplete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/jobs/{id}/complete`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JobCompleteParametersToJSON(requestParameters.jobCompleteParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobDetailsFromJSON(jsonValue));
    }

    /**
     * Mark a job as completed.
     * Complete a job
     */
    async jobComplete(requestParameters: JobCompleteRequest): Promise<JobDetails> {
        const response = await this.jobCompleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new job.
     * Create a job
     */
    async jobCreateRaw(requestParameters: JobCreateRequest): Promise<runtime.ApiResponse<JobDetails>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobCreate.');
        }

        if (requestParameters.jobCreateParameters === null || requestParameters.jobCreateParameters === undefined) {
            throw new runtime.RequiredError('jobCreateParameters','Required parameter requestParameters.jobCreateParameters was null or undefined when calling jobCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/jobs`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JobCreateParametersToJSON(requestParameters.jobCreateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobDetailsFromJSON(jsonValue));
    }

    /**
     * Create a new job.
     * Create a job
     */
    async jobCreate(requestParameters: JobCreateRequest): Promise<JobDetails> {
        const response = await this.jobCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an existing job.
     * Delete a job
     */
    async jobDeleteRaw(requestParameters: JobDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling jobDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/jobs/{id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete an existing job.
     * Delete a job
     */
    async jobDelete(requestParameters: JobDeleteRequest): Promise<void> {
        const response = await this.jobDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Add multiple keys to a existing job.
     * Add keys to job
     */
    async jobKeysCreateRaw(requestParameters: JobKeysCreateRequest): Promise<runtime.ApiResponse<JobDetails>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobKeysCreate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling jobKeysCreate.');
        }

        if (requestParameters.jobKeysCreateParameters === null || requestParameters.jobKeysCreateParameters === undefined) {
            throw new runtime.RequiredError('jobKeysCreateParameters','Required parameter requestParameters.jobKeysCreateParameters was null or undefined when calling jobKeysCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/jobs/{id}/keys`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JobKeysCreateParametersToJSON(requestParameters.jobKeysCreateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobDetailsFromJSON(jsonValue));
    }

    /**
     * Add multiple keys to a existing job.
     * Add keys to job
     */
    async jobKeysCreate(requestParameters: JobKeysCreateRequest): Promise<JobDetails> {
        const response = await this.jobKeysCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove multiple keys from existing job.
     * Remove keys from job
     */
    async jobKeysDeleteRaw(requestParameters: JobKeysDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobKeysDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling jobKeysDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        if (requestParameters.translationKeyIds) {
            queryParameters['translation_key_ids'] = requestParameters.translationKeyIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/jobs/{id}/keys`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Remove multiple keys from existing job.
     * Remove keys from job
     */
    async jobKeysDelete(requestParameters: JobKeysDeleteRequest): Promise<void> {
        const response = await this.jobKeysDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Mark a job as uncompleted.
     * Reopen a job
     */
    async jobReopenRaw(requestParameters: JobReopenRequest): Promise<runtime.ApiResponse<JobDetails>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobReopen.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling jobReopen.');
        }

        if (requestParameters.jobReopenParameters === null || requestParameters.jobReopenParameters === undefined) {
            throw new runtime.RequiredError('jobReopenParameters','Required parameter requestParameters.jobReopenParameters was null or undefined when calling jobReopen.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/jobs/{id}/reopen`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JobReopenParametersToJSON(requestParameters.jobReopenParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobDetailsFromJSON(jsonValue));
    }

    /**
     * Mark a job as uncompleted.
     * Reopen a job
     */
    async jobReopen(requestParameters: JobReopenRequest): Promise<JobDetails> {
        const response = await this.jobReopenRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get details on a single job for a given project.
     * Get a single job
     */
    async jobShowRaw(requestParameters: JobShowRequest): Promise<runtime.ApiResponse<JobDetails>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobShow.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling jobShow.');
        }

        const queryParameters: any = {};

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/jobs/{id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobDetailsFromJSON(jsonValue));
    }

    /**
     * Get details on a single job for a given project.
     * Get a single job
     */
    async jobShow(requestParameters: JobShowRequest): Promise<JobDetails> {
        const response = await this.jobShowRaw(requestParameters);
        return await response.value();
    }

    /**
     * Starts an existing job in state draft.
     * Start a job
     */
    async jobStartRaw(requestParameters: JobStartRequest): Promise<runtime.ApiResponse<JobDetails>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobStart.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling jobStart.');
        }

        if (requestParameters.jobStartParameters === null || requestParameters.jobStartParameters === undefined) {
            throw new runtime.RequiredError('jobStartParameters','Required parameter requestParameters.jobStartParameters was null or undefined when calling jobStart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/jobs/{id}/start`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JobStartParametersToJSON(requestParameters.jobStartParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobDetailsFromJSON(jsonValue));
    }

    /**
     * Starts an existing job in state draft.
     * Start a job
     */
    async jobStart(requestParameters: JobStartRequest): Promise<JobDetails> {
        const response = await this.jobStartRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing job.
     * Update a job
     */
    async jobUpdateRaw(requestParameters: JobUpdateRequest): Promise<runtime.ApiResponse<JobDetails>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling jobUpdate.');
        }

        if (requestParameters.jobUpdateParameters === null || requestParameters.jobUpdateParameters === undefined) {
            throw new runtime.RequiredError('jobUpdateParameters','Required parameter requestParameters.jobUpdateParameters was null or undefined when calling jobUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/jobs/{id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: JobUpdateParametersToJSON(requestParameters.jobUpdateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobDetailsFromJSON(jsonValue));
    }

    /**
     * Update an existing job.
     * Update a job
     */
    async jobUpdate(requestParameters: JobUpdateRequest): Promise<JobDetails> {
        const response = await this.jobUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all jobs for the given project.
     * List jobs
     */
    async jobsListRaw(requestParameters: JobsListRequest): Promise<runtime.ApiResponse<Array<Job>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        if (requestParameters.ownedBy !== undefined) {
            queryParameters['owned_by'] = requestParameters.ownedBy;
        }

        if (requestParameters.assignedTo !== undefined) {
            queryParameters['assigned_to'] = requestParameters.assignedTo;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/jobs`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobFromJSON));
    }

    /**
     * List all jobs for the given project.
     * List jobs
     */
    async jobsList(requestParameters: JobsListRequest): Promise<Array<Job>> {
        const response = await this.jobsListRaw(requestParameters);
        return await response.value();
    }

}
