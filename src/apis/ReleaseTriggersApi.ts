/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ReleaseCreateParameters1,
    ReleaseCreateParameters1FromJSON,
    ReleaseCreateParameters1ToJSON,
    ReleaseTrigger,
    ReleaseTriggerFromJSON,
    ReleaseTriggerToJSON,
    ReleaseUpdateParameters1,
    ReleaseUpdateParameters1FromJSON,
    ReleaseUpdateParameters1ToJSON,
} from '../models';

export interface ReleaseTriggersCreateRequest {
    accountId: string;
    distributionId: string;
    releaseCreateParameters1: ReleaseCreateParameters1;
    xPhraseAppOTP?: string;
}

export interface ReleaseTriggersDestroyRequest {
    accountId: string;
    distributionId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface ReleaseTriggersListRequest {
    accountId: string;
    distributionId: string;
    xPhraseAppOTP?: string;
}

export interface ReleaseTriggersShowRequest {
    accountId: string;
    distributionId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface ReleaseTriggersUpdateRequest {
    accountId: string;
    distributionId: string;
    id: string;
    releaseUpdateParameters1: ReleaseUpdateParameters1;
    xPhraseAppOTP?: string;
}

/**
 * 
 */
export class ReleaseTriggersApi extends runtime.BaseAPI {

    /**
     * Create a new recurring release. New releases will be published automatically, based on the cron schedule provided. Currently, only one release trigger can exist per distribution.
     * Create a release trigger
     */
    async releaseTriggersCreateRaw(requestParameters: ReleaseTriggersCreateRequest): Promise<runtime.ApiResponse<ReleaseTrigger>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling releaseTriggersCreate.');
        }

        if (requestParameters.distributionId === null || requestParameters.distributionId === undefined) {
            throw new runtime.RequiredError('distributionId','Required parameter requestParameters.distributionId was null or undefined when calling releaseTriggersCreate.');
        }

        if (requestParameters.releaseCreateParameters1 === null || requestParameters.releaseCreateParameters1 === undefined) {
            throw new runtime.RequiredError('releaseCreateParameters1','Required parameter requestParameters.releaseCreateParameters1 was null or undefined when calling releaseTriggersCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/distributions/{distribution_id}/release_triggers`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"distribution_id"}}`, encodeURIComponent(String(requestParameters.distributionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReleaseCreateParameters1ToJSON(requestParameters.releaseCreateParameters1),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReleaseTriggerFromJSON(jsonValue));
    }

    /**
     * Create a new recurring release. New releases will be published automatically, based on the cron schedule provided. Currently, only one release trigger can exist per distribution.
     * Create a release trigger
     */
    async releaseTriggersCreate(requestParameters: ReleaseTriggersCreateRequest): Promise<ReleaseTrigger> {
        const response = await this.releaseTriggersCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a single release trigger.
     * Delete a single release trigger
     */
    async releaseTriggersDestroyRaw(requestParameters: ReleaseTriggersDestroyRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling releaseTriggersDestroy.');
        }

        if (requestParameters.distributionId === null || requestParameters.distributionId === undefined) {
            throw new runtime.RequiredError('distributionId','Required parameter requestParameters.distributionId was null or undefined when calling releaseTriggersDestroy.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling releaseTriggersDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/distributions/{distribution_id}/release_triggers/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"distribution_id"}}`, encodeURIComponent(String(requestParameters.distributionId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete a single release trigger.
     * Delete a single release trigger
     */
    async releaseTriggersDestroy(requestParameters: ReleaseTriggersDestroyRequest): Promise<any> {
        const response = await this.releaseTriggersDestroyRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all release triggers for the given distribution.  Note: Currently only one release trigger can exist per distribution. 
     * List release triggers
     */
    async releaseTriggersListRaw(requestParameters: ReleaseTriggersListRequest): Promise<runtime.ApiResponse<Array<ReleaseTrigger>>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling releaseTriggersList.');
        }

        if (requestParameters.distributionId === null || requestParameters.distributionId === undefined) {
            throw new runtime.RequiredError('distributionId','Required parameter requestParameters.distributionId was null or undefined when calling releaseTriggersList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/distributions/{distribution_id}/release_triggers`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"distribution_id"}}`, encodeURIComponent(String(requestParameters.distributionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReleaseTriggerFromJSON));
    }

    /**
     * List all release triggers for the given distribution.  Note: Currently only one release trigger can exist per distribution. 
     * List release triggers
     */
    async releaseTriggersList(requestParameters: ReleaseTriggersListRequest): Promise<Array<ReleaseTrigger>> {
        const response = await this.releaseTriggersListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get details of a single release trigger.
     * Get a single release trigger
     */
    async releaseTriggersShowRaw(requestParameters: ReleaseTriggersShowRequest): Promise<runtime.ApiResponse<ReleaseTrigger>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling releaseTriggersShow.');
        }

        if (requestParameters.distributionId === null || requestParameters.distributionId === undefined) {
            throw new runtime.RequiredError('distributionId','Required parameter requestParameters.distributionId was null or undefined when calling releaseTriggersShow.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling releaseTriggersShow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/distributions/{distribution_id}/release_triggers/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"distribution_id"}}`, encodeURIComponent(String(requestParameters.distributionId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReleaseTriggerFromJSON(jsonValue));
    }

    /**
     * Get details of a single release trigger.
     * Get a single release trigger
     */
    async releaseTriggersShow(requestParameters: ReleaseTriggersShowRequest): Promise<ReleaseTrigger> {
        const response = await this.releaseTriggersShowRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a recurring release.
     * Update a release trigger
     */
    async releaseTriggersUpdateRaw(requestParameters: ReleaseTriggersUpdateRequest): Promise<runtime.ApiResponse<ReleaseTrigger>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling releaseTriggersUpdate.');
        }

        if (requestParameters.distributionId === null || requestParameters.distributionId === undefined) {
            throw new runtime.RequiredError('distributionId','Required parameter requestParameters.distributionId was null or undefined when calling releaseTriggersUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling releaseTriggersUpdate.');
        }

        if (requestParameters.releaseUpdateParameters1 === null || requestParameters.releaseUpdateParameters1 === undefined) {
            throw new runtime.RequiredError('releaseUpdateParameters1','Required parameter requestParameters.releaseUpdateParameters1 was null or undefined when calling releaseTriggersUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/distributions/{distribution_id}/release_triggers/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"distribution_id"}}`, encodeURIComponent(String(requestParameters.distributionId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ReleaseUpdateParameters1ToJSON(requestParameters.releaseUpdateParameters1),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReleaseTriggerFromJSON(jsonValue));
    }

    /**
     * Update a recurring release.
     * Update a release trigger
     */
    async releaseTriggersUpdate(requestParameters: ReleaseTriggersUpdateRequest): Promise<ReleaseTrigger> {
        const response = await this.releaseTriggersUpdateRaw(requestParameters);
        return await response.value();
    }

}
