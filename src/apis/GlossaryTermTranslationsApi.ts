/* tslint:disable */
/* eslint-disable */
/**
 * Phrase API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GlossaryTermTranslation,
    GlossaryTermTranslationFromJSON,
    GlossaryTermTranslationToJSON,
    GlossaryTermTranslationCreateParameters,
    GlossaryTermTranslationCreateParametersFromJSON,
    GlossaryTermTranslationCreateParametersToJSON,
    GlossaryTermTranslationUpdateParameters,
    GlossaryTermTranslationUpdateParametersFromJSON,
    GlossaryTermTranslationUpdateParametersToJSON,
} from '../models';

export interface GlossaryTermTranslationCreateRequest {
    accountId: string;
    glossaryId: string;
    termId: string;
    glossaryTermTranslationCreateParameters: GlossaryTermTranslationCreateParameters;
    xPhraseAppOTP?: string;
}

export interface GlossaryTermTranslationDeleteRequest {
    accountId: string;
    glossaryId: string;
    termId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface GlossaryTermTranslationUpdateRequest {
    accountId: string;
    glossaryId: string;
    termId: string;
    id: string;
    glossaryTermTranslationUpdateParameters: GlossaryTermTranslationUpdateParameters;
    xPhraseAppOTP?: string;
}

/**
 * 
 */
export class GlossaryTermTranslationsApi extends runtime.BaseAPI {

    /**
     * Create a new glossary term translation.
     * Create a glossary term translation
     */
    async glossaryTermTranslationCreateRaw(requestParameters: GlossaryTermTranslationCreateRequest): Promise<runtime.ApiResponse<GlossaryTermTranslation>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling glossaryTermTranslationCreate.');
        }

        if (requestParameters.glossaryId === null || requestParameters.glossaryId === undefined) {
            throw new runtime.RequiredError('glossaryId','Required parameter requestParameters.glossaryId was null or undefined when calling glossaryTermTranslationCreate.');
        }

        if (requestParameters.termId === null || requestParameters.termId === undefined) {
            throw new runtime.RequiredError('termId','Required parameter requestParameters.termId was null or undefined when calling glossaryTermTranslationCreate.');
        }

        if (requestParameters.glossaryTermTranslationCreateParameters === null || requestParameters.glossaryTermTranslationCreateParameters === undefined) {
            throw new runtime.RequiredError('glossaryTermTranslationCreateParameters','Required parameter requestParameters.glossaryTermTranslationCreateParameters was null or undefined when calling glossaryTermTranslationCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{account_id}/glossaries/{glossary_id}/terms/{term_id}/translations`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"glossary_id"}}`, encodeURIComponent(String(requestParameters.glossaryId))).replace(`{${"term_id"}}`, encodeURIComponent(String(requestParameters.termId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GlossaryTermTranslationCreateParametersToJSON(requestParameters.glossaryTermTranslationCreateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GlossaryTermTranslationFromJSON(jsonValue));
    }

    /**
     * Create a new glossary term translation.
     * Create a glossary term translation
     */
    async glossaryTermTranslationCreate(requestParameters: GlossaryTermTranslationCreateRequest): Promise<GlossaryTermTranslation> {
        const response = await this.glossaryTermTranslationCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an existing glossary term translation.
     * Delete a glossary term translation
     */
    async glossaryTermTranslationDeleteRaw(requestParameters: GlossaryTermTranslationDeleteRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling glossaryTermTranslationDelete.');
        }

        if (requestParameters.glossaryId === null || requestParameters.glossaryId === undefined) {
            throw new runtime.RequiredError('glossaryId','Required parameter requestParameters.glossaryId was null or undefined when calling glossaryTermTranslationDelete.');
        }

        if (requestParameters.termId === null || requestParameters.termId === undefined) {
            throw new runtime.RequiredError('termId','Required parameter requestParameters.termId was null or undefined when calling glossaryTermTranslationDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling glossaryTermTranslationDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{account_id}/glossaries/{glossary_id}/terms/{term_id}/translations/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"glossary_id"}}`, encodeURIComponent(String(requestParameters.glossaryId))).replace(`{${"term_id"}}`, encodeURIComponent(String(requestParameters.termId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete an existing glossary term translation.
     * Delete a glossary term translation
     */
    async glossaryTermTranslationDelete(requestParameters: GlossaryTermTranslationDeleteRequest): Promise<any> {
        const response = await this.glossaryTermTranslationDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing glossary term translation.
     * Update a glossary term translation
     */
    async glossaryTermTranslationUpdateRaw(requestParameters: GlossaryTermTranslationUpdateRequest): Promise<runtime.ApiResponse<GlossaryTermTranslation>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling glossaryTermTranslationUpdate.');
        }

        if (requestParameters.glossaryId === null || requestParameters.glossaryId === undefined) {
            throw new runtime.RequiredError('glossaryId','Required parameter requestParameters.glossaryId was null or undefined when calling glossaryTermTranslationUpdate.');
        }

        if (requestParameters.termId === null || requestParameters.termId === undefined) {
            throw new runtime.RequiredError('termId','Required parameter requestParameters.termId was null or undefined when calling glossaryTermTranslationUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling glossaryTermTranslationUpdate.');
        }

        if (requestParameters.glossaryTermTranslationUpdateParameters === null || requestParameters.glossaryTermTranslationUpdateParameters === undefined) {
            throw new runtime.RequiredError('glossaryTermTranslationUpdateParameters','Required parameter requestParameters.glossaryTermTranslationUpdateParameters was null or undefined when calling glossaryTermTranslationUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{account_id}/glossaries/{glossary_id}/terms/{term_id}/translations/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"glossary_id"}}`, encodeURIComponent(String(requestParameters.glossaryId))).replace(`{${"term_id"}}`, encodeURIComponent(String(requestParameters.termId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GlossaryTermTranslationUpdateParametersToJSON(requestParameters.glossaryTermTranslationUpdateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GlossaryTermTranslationFromJSON(jsonValue));
    }

    /**
     * Update an existing glossary term translation.
     * Update a glossary term translation
     */
    async glossaryTermTranslationUpdate(requestParameters: GlossaryTermTranslationUpdateRequest): Promise<GlossaryTermTranslation> {
        const response = await this.glossaryTermTranslationUpdateRaw(requestParameters);
        return await response.value();
    }

}
