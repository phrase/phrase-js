/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CustomMetadataPropertyCreate422Response,
    CustomMetadataPropertyCreate422ResponseFromJSON,
    CustomMetadataPropertyCreate422ResponseToJSON,
    KeyLink,
    KeyLinkFromJSON,
    KeyLinkToJSON,
    KeyLinksBatchDestroyParameters,
    KeyLinksBatchDestroyParametersFromJSON,
    KeyLinksBatchDestroyParametersToJSON,
    KeyLinksCreateParameters,
    KeyLinksCreateParametersFromJSON,
    KeyLinksCreateParametersToJSON,
    KeyLinksIndex400Response,
    KeyLinksIndex400ResponseFromJSON,
    KeyLinksIndex400ResponseToJSON,
} from '../models';

export interface KeyLinksBatchDestroyRequest {
    accountId: string;
    keyLinksBatchDestroyParameters: KeyLinksBatchDestroyParameters;
    xPhraseAppOTP?: string;
    unlinkParent?: boolean;
}

export interface KeyLinksCreateRequest {
    accountId: string;
    keyLinksCreateParameters: KeyLinksCreateParameters;
    xPhraseAppOTP?: string;
}

export interface KeyLinksDestroyRequest {
    accountId: string;
    childKeyId: string;
    xPhraseAppOTP?: string;
}

export interface KeyLinksIndexRequest {
    accountId: string;
    xPhraseAppOTP?: string;
}

/**
 * 
 */
export class LinkedKeysApi extends runtime.BaseAPI {

    /**
     * Unlinks multiple child keys from a given parent key in a single operation.
     * Batch unlink child keys from a parent key
     */
    async keyLinksBatchDestroyRaw(requestParameters: KeyLinksBatchDestroyRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling keyLinksBatchDestroy.');
        }

        if (requestParameters.keyLinksBatchDestroyParameters === null || requestParameters.keyLinksBatchDestroyParameters === undefined) {
            throw new runtime.RequiredError('keyLinksBatchDestroyParameters','Required parameter requestParameters.keyLinksBatchDestroyParameters was null or undefined when calling keyLinksBatchDestroy.');
        }

        const queryParameters: any = {};

        if (requestParameters.unlinkParent !== undefined) {
            queryParameters['unlink_parent'] = requestParameters.unlinkParent;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/keys/{id}/key_links`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: KeyLinksBatchDestroyParametersToJSON(requestParameters.keyLinksBatchDestroyParameters),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Unlinks multiple child keys from a given parent key in a single operation.
     * Batch unlink child keys from a parent key
     */
    async keyLinksBatchDestroy(requestParameters: KeyLinksBatchDestroyRequest): Promise<any> {
        const response = await this.keyLinksBatchDestroyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates links between a given parent key and one or more child keys.
     * Link child keys to a parent key
     */
    async keyLinksCreateRaw(requestParameters: KeyLinksCreateRequest): Promise<runtime.ApiResponse<KeyLink>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling keyLinksCreate.');
        }

        if (requestParameters.keyLinksCreateParameters === null || requestParameters.keyLinksCreateParameters === undefined) {
            throw new runtime.RequiredError('keyLinksCreateParameters','Required parameter requestParameters.keyLinksCreateParameters was null or undefined when calling keyLinksCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/keys/{id}/key_links`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KeyLinksCreateParametersToJSON(requestParameters.keyLinksCreateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KeyLinkFromJSON(jsonValue));
    }

    /**
     * Creates links between a given parent key and one or more child keys.
     * Link child keys to a parent key
     */
    async keyLinksCreate(requestParameters: KeyLinksCreateRequest): Promise<KeyLink> {
        const response = await this.keyLinksCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Unlinks a single child key from a given parent key.
     * Unlink a child key from a parent key
     */
    async keyLinksDestroyRaw(requestParameters: KeyLinksDestroyRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling keyLinksDestroy.');
        }

        if (requestParameters.childKeyId === null || requestParameters.childKeyId === undefined) {
            throw new runtime.RequiredError('childKeyId','Required parameter requestParameters.childKeyId was null or undefined when calling keyLinksDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/keys/{id}/key_links/{child_key_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"child_key_id"}}`, encodeURIComponent(String(requestParameters.childKeyId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Unlinks a single child key from a given parent key.
     * Unlink a child key from a parent key
     */
    async keyLinksDestroy(requestParameters: KeyLinksDestroyRequest): Promise<any> {
        const response = await this.keyLinksDestroyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns detailed information about a parent key, including its linked child keys.
     * Retrieve all child keys linked to a specific parent key
     */
    async keyLinksIndexRaw(requestParameters: KeyLinksIndexRequest): Promise<runtime.ApiResponse<KeyLink>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling keyLinksIndex.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/keys/{id}/key_links`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KeyLinkFromJSON(jsonValue));
    }

    /**
     * Returns detailed information about a parent key, including its linked child keys.
     * Retrieve all child keys linked to a specific parent key
     */
    async keyLinksIndex(requestParameters: KeyLinksIndexRequest): Promise<KeyLink> {
        const response = await this.keyLinksIndexRaw(requestParameters);
        return await response.value();
    }

}
