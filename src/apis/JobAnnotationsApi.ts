/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    JobAnnotation,
    JobAnnotationFromJSON,
    JobAnnotationToJSON,
    JobAnnotationUpdateParameters,
    JobAnnotationUpdateParametersFromJSON,
    JobAnnotationUpdateParametersToJSON,
} from '../models';

export interface JobAnnotationDeleteRequest {
    projectId: string;
    jobId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
}

export interface JobAnnotationUpdateRequest {
    projectId: string;
    jobId: string;
    id: string;
    jobAnnotationUpdateParameters: JobAnnotationUpdateParameters;
    xPhraseAppOTP?: string;
}

export interface JobAnnotationsListRequest {
    projectId: string;
    jobId: string;
    xPhraseAppOTP?: string;
    branch?: string;
}

export interface JobLocaleAnnotationDeleteRequest {
    projectId: string;
    jobId: string;
    jobLocaleId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
}

export interface JobLocaleAnnotationUpdateRequest {
    projectId: string;
    jobId: string;
    jobLocaleId: string;
    id: string;
    jobAnnotationUpdateParameters: JobAnnotationUpdateParameters;
    xPhraseAppOTP?: string;
}

export interface JobLocaleAnnotationsListRequest {
    projectId: string;
    jobId: string;
    jobLocaleId: string;
    xPhraseAppOTP?: string;
    branch?: string;
}

/**
 * 
 */
export class JobAnnotationsApi extends runtime.BaseAPI {

    /**
     * Delete an annotation for a job.
     * Delete a job annotation
     */
    async jobAnnotationDeleteRaw(requestParameters: JobAnnotationDeleteRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobAnnotationDelete.');
        }

        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling jobAnnotationDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling jobAnnotationDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/jobs/{job_id}/annotations/{id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete an annotation for a job.
     * Delete a job annotation
     */
    async jobAnnotationDelete(requestParameters: JobAnnotationDeleteRequest): Promise<any> {
        const response = await this.jobAnnotationDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create or update an annotation for a job. If the annotation already exists, it will be updated; otherwise, a new annotation will be created.
     * Create/Update a job annotation
     */
    async jobAnnotationUpdateRaw(requestParameters: JobAnnotationUpdateRequest): Promise<runtime.ApiResponse<JobAnnotation>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobAnnotationUpdate.');
        }

        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling jobAnnotationUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling jobAnnotationUpdate.');
        }

        if (requestParameters.jobAnnotationUpdateParameters === null || requestParameters.jobAnnotationUpdateParameters === undefined) {
            throw new runtime.RequiredError('jobAnnotationUpdateParameters','Required parameter requestParameters.jobAnnotationUpdateParameters was null or undefined when calling jobAnnotationUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/jobs/{job_id}/annotations/{id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: JobAnnotationUpdateParametersToJSON(requestParameters.jobAnnotationUpdateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobAnnotationFromJSON(jsonValue));
    }

    /**
     * Create or update an annotation for a job. If the annotation already exists, it will be updated; otherwise, a new annotation will be created.
     * Create/Update a job annotation
     */
    async jobAnnotationUpdate(requestParameters: JobAnnotationUpdateRequest): Promise<JobAnnotation> {
        const response = await this.jobAnnotationUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a list of annotations for a job.
     * List job annotations
     */
    async jobAnnotationsListRaw(requestParameters: JobAnnotationsListRequest): Promise<runtime.ApiResponse<Array<JobAnnotation>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobAnnotationsList.');
        }

        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling jobAnnotationsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/jobs/{job_id}/annotations`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobAnnotationFromJSON));
    }

    /**
     * Retrieve a list of annotations for a job.
     * List job annotations
     */
    async jobAnnotationsList(requestParameters: JobAnnotationsListRequest): Promise<Array<JobAnnotation>> {
        const response = await this.jobAnnotationsListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an annotation for a job locale.
     * Delete a job locale annotation
     */
    async jobLocaleAnnotationDeleteRaw(requestParameters: JobLocaleAnnotationDeleteRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobLocaleAnnotationDelete.');
        }

        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling jobLocaleAnnotationDelete.');
        }

        if (requestParameters.jobLocaleId === null || requestParameters.jobLocaleId === undefined) {
            throw new runtime.RequiredError('jobLocaleId','Required parameter requestParameters.jobLocaleId was null or undefined when calling jobLocaleAnnotationDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling jobLocaleAnnotationDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/jobs/{job_id}/locales/{job_locale_id}/annotations/{id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))).replace(`{${"job_locale_id"}}`, encodeURIComponent(String(requestParameters.jobLocaleId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete an annotation for a job locale.
     * Delete a job locale annotation
     */
    async jobLocaleAnnotationDelete(requestParameters: JobLocaleAnnotationDeleteRequest): Promise<any> {
        const response = await this.jobLocaleAnnotationDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create or update an annotation for a job locale. If the annotation already exists, it will be updated; otherwise, a new annotation will be created.
     * Create/Update a job locale annotation
     */
    async jobLocaleAnnotationUpdateRaw(requestParameters: JobLocaleAnnotationUpdateRequest): Promise<runtime.ApiResponse<JobAnnotation>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobLocaleAnnotationUpdate.');
        }

        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling jobLocaleAnnotationUpdate.');
        }

        if (requestParameters.jobLocaleId === null || requestParameters.jobLocaleId === undefined) {
            throw new runtime.RequiredError('jobLocaleId','Required parameter requestParameters.jobLocaleId was null or undefined when calling jobLocaleAnnotationUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling jobLocaleAnnotationUpdate.');
        }

        if (requestParameters.jobAnnotationUpdateParameters === null || requestParameters.jobAnnotationUpdateParameters === undefined) {
            throw new runtime.RequiredError('jobAnnotationUpdateParameters','Required parameter requestParameters.jobAnnotationUpdateParameters was null or undefined when calling jobLocaleAnnotationUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/jobs/{job_id}/locales/{job_locale_id}/annotations/{id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))).replace(`{${"job_locale_id"}}`, encodeURIComponent(String(requestParameters.jobLocaleId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: JobAnnotationUpdateParametersToJSON(requestParameters.jobAnnotationUpdateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobAnnotationFromJSON(jsonValue));
    }

    /**
     * Create or update an annotation for a job locale. If the annotation already exists, it will be updated; otherwise, a new annotation will be created.
     * Create/Update a job locale annotation
     */
    async jobLocaleAnnotationUpdate(requestParameters: JobLocaleAnnotationUpdateRequest): Promise<JobAnnotation> {
        const response = await this.jobLocaleAnnotationUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a list of annotations for a job locale.
     * List job locale annotations
     */
    async jobLocaleAnnotationsListRaw(requestParameters: JobLocaleAnnotationsListRequest): Promise<runtime.ApiResponse<Array<JobAnnotation>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobLocaleAnnotationsList.');
        }

        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling jobLocaleAnnotationsList.');
        }

        if (requestParameters.jobLocaleId === null || requestParameters.jobLocaleId === undefined) {
            throw new runtime.RequiredError('jobLocaleId','Required parameter requestParameters.jobLocaleId was null or undefined when calling jobLocaleAnnotationsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/jobs/{job_id}/locales/{job_locale_id}/annotations`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))).replace(`{${"job_locale_id"}}`, encodeURIComponent(String(requestParameters.jobLocaleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobAnnotationFromJSON));
    }

    /**
     * Retrieve a list of annotations for a job locale.
     * List job locale annotations
     */
    async jobLocaleAnnotationsList(requestParameters: JobLocaleAnnotationsListRequest): Promise<Array<JobAnnotation>> {
        const response = await this.jobLocaleAnnotationsListRaw(requestParameters);
        return await response.value();
    }

}
