/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    JobTemplateLocales,
    JobTemplateLocalesFromJSON,
    JobTemplateLocalesToJSON,
    OrganizationJobTemplateLocaleUpdateParameters,
    OrganizationJobTemplateLocaleUpdateParametersFromJSON,
    OrganizationJobTemplateLocaleUpdateParametersToJSON,
    OrganizationJobTemplateLocalesCreateParameters,
    OrganizationJobTemplateLocalesCreateParametersFromJSON,
    OrganizationJobTemplateLocalesCreateParametersToJSON,
} from '../models';

export interface OrganizationJobTemplateLocaleDeleteRequest {
    accountId: string;
    jobTemplateId: string;
    jobTemplateLocaleId: string;
    xPhraseAppOTP?: string;
}

export interface OrganizationJobTemplateLocaleShowRequest {
    accountId: string;
    jobTemplateId: string;
    jobTemplateLocaleId: string;
    xPhraseAppOTP?: string;
}

export interface OrganizationJobTemplateLocaleUpdateRequest {
    accountId: string;
    jobTemplateId: string;
    jobTemplateLocaleId: string;
    organizationJobTemplateLocaleUpdateParameters: OrganizationJobTemplateLocaleUpdateParameters;
    xPhraseAppOTP?: string;
}

export interface OrganizationJobTemplateLocalesCreateRequest {
    accountId: string;
    jobTemplateId: string;
    organizationJobTemplateLocalesCreateParameters: OrganizationJobTemplateLocalesCreateParameters;
    xPhraseAppOTP?: string;
}

export interface OrganizationJobTemplateLocalesListRequest {
    accountId: string;
    jobTemplateId: string;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
}

/**
 * 
 */
export class OrganizationJobTemplateLocalesApi extends runtime.BaseAPI {

    /**
     * Delete an existing organization job template locale.
     * Delete an organization job template locale
     */
    async organizationJobTemplateLocaleDeleteRaw(requestParameters: OrganizationJobTemplateLocaleDeleteRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling organizationJobTemplateLocaleDelete.');
        }

        if (requestParameters.jobTemplateId === null || requestParameters.jobTemplateId === undefined) {
            throw new runtime.RequiredError('jobTemplateId','Required parameter requestParameters.jobTemplateId was null or undefined when calling organizationJobTemplateLocaleDelete.');
        }

        if (requestParameters.jobTemplateLocaleId === null || requestParameters.jobTemplateLocaleId === undefined) {
            throw new runtime.RequiredError('jobTemplateLocaleId','Required parameter requestParameters.jobTemplateLocaleId was null or undefined when calling organizationJobTemplateLocaleDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/job_templates/{job_template_id}/locales/{job_template_locale_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"job_template_id"}}`, encodeURIComponent(String(requestParameters.jobTemplateId))).replace(`{${"job_template_locale_id"}}`, encodeURIComponent(String(requestParameters.jobTemplateLocaleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete an existing organization job template locale.
     * Delete an organization job template locale
     */
    async organizationJobTemplateLocaleDelete(requestParameters: OrganizationJobTemplateLocaleDeleteRequest): Promise<any> {
        const response = await this.organizationJobTemplateLocaleDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a single job template locale for a given organization job template.
     * Get a single organization job template locale
     */
    async organizationJobTemplateLocaleShowRaw(requestParameters: OrganizationJobTemplateLocaleShowRequest): Promise<runtime.ApiResponse<JobTemplateLocales>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling organizationJobTemplateLocaleShow.');
        }

        if (requestParameters.jobTemplateId === null || requestParameters.jobTemplateId === undefined) {
            throw new runtime.RequiredError('jobTemplateId','Required parameter requestParameters.jobTemplateId was null or undefined when calling organizationJobTemplateLocaleShow.');
        }

        if (requestParameters.jobTemplateLocaleId === null || requestParameters.jobTemplateLocaleId === undefined) {
            throw new runtime.RequiredError('jobTemplateLocaleId','Required parameter requestParameters.jobTemplateLocaleId was null or undefined when calling organizationJobTemplateLocaleShow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/job_templates/{job_template_id}/locales/{job_template_locale_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"job_template_id"}}`, encodeURIComponent(String(requestParameters.jobTemplateId))).replace(`{${"job_template_locale_id"}}`, encodeURIComponent(String(requestParameters.jobTemplateLocaleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobTemplateLocalesFromJSON(jsonValue));
    }

    /**
     * Get a single job template locale for a given organization job template.
     * Get a single organization job template locale
     */
    async organizationJobTemplateLocaleShow(requestParameters: OrganizationJobTemplateLocaleShowRequest): Promise<JobTemplateLocales> {
        const response = await this.organizationJobTemplateLocaleShowRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing organization job template locale.
     * Update an organization job template locale
     */
    async organizationJobTemplateLocaleUpdateRaw(requestParameters: OrganizationJobTemplateLocaleUpdateRequest): Promise<runtime.ApiResponse<JobTemplateLocales>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling organizationJobTemplateLocaleUpdate.');
        }

        if (requestParameters.jobTemplateId === null || requestParameters.jobTemplateId === undefined) {
            throw new runtime.RequiredError('jobTemplateId','Required parameter requestParameters.jobTemplateId was null or undefined when calling organizationJobTemplateLocaleUpdate.');
        }

        if (requestParameters.jobTemplateLocaleId === null || requestParameters.jobTemplateLocaleId === undefined) {
            throw new runtime.RequiredError('jobTemplateLocaleId','Required parameter requestParameters.jobTemplateLocaleId was null or undefined when calling organizationJobTemplateLocaleUpdate.');
        }

        if (requestParameters.organizationJobTemplateLocaleUpdateParameters === null || requestParameters.organizationJobTemplateLocaleUpdateParameters === undefined) {
            throw new runtime.RequiredError('organizationJobTemplateLocaleUpdateParameters','Required parameter requestParameters.organizationJobTemplateLocaleUpdateParameters was null or undefined when calling organizationJobTemplateLocaleUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/job_templates/{job_template_id}/locales/{job_template_locale_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"job_template_id"}}`, encodeURIComponent(String(requestParameters.jobTemplateId))).replace(`{${"job_template_locale_id"}}`, encodeURIComponent(String(requestParameters.jobTemplateLocaleId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationJobTemplateLocaleUpdateParametersToJSON(requestParameters.organizationJobTemplateLocaleUpdateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobTemplateLocalesFromJSON(jsonValue));
    }

    /**
     * Update an existing organization job template locale.
     * Update an organization job template locale
     */
    async organizationJobTemplateLocaleUpdate(requestParameters: OrganizationJobTemplateLocaleUpdateRequest): Promise<JobTemplateLocales> {
        const response = await this.organizationJobTemplateLocaleUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new organization job template locale.
     * Create an organization job template locale
     */
    async organizationJobTemplateLocalesCreateRaw(requestParameters: OrganizationJobTemplateLocalesCreateRequest): Promise<runtime.ApiResponse<JobTemplateLocales>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling organizationJobTemplateLocalesCreate.');
        }

        if (requestParameters.jobTemplateId === null || requestParameters.jobTemplateId === undefined) {
            throw new runtime.RequiredError('jobTemplateId','Required parameter requestParameters.jobTemplateId was null or undefined when calling organizationJobTemplateLocalesCreate.');
        }

        if (requestParameters.organizationJobTemplateLocalesCreateParameters === null || requestParameters.organizationJobTemplateLocalesCreateParameters === undefined) {
            throw new runtime.RequiredError('organizationJobTemplateLocalesCreateParameters','Required parameter requestParameters.organizationJobTemplateLocalesCreateParameters was null or undefined when calling organizationJobTemplateLocalesCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/job_templates/{job_template_id}/locales`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"job_template_id"}}`, encodeURIComponent(String(requestParameters.jobTemplateId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationJobTemplateLocalesCreateParametersToJSON(requestParameters.organizationJobTemplateLocalesCreateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobTemplateLocalesFromJSON(jsonValue));
    }

    /**
     * Create a new organization job template locale.
     * Create an organization job template locale
     */
    async organizationJobTemplateLocalesCreate(requestParameters: OrganizationJobTemplateLocalesCreateRequest): Promise<JobTemplateLocales> {
        const response = await this.organizationJobTemplateLocalesCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all job template locales for a given organization job template.
     * List organization job template locales
     */
    async organizationJobTemplateLocalesListRaw(requestParameters: OrganizationJobTemplateLocalesListRequest): Promise<runtime.ApiResponse<Array<JobTemplateLocales>>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling organizationJobTemplateLocalesList.');
        }

        if (requestParameters.jobTemplateId === null || requestParameters.jobTemplateId === undefined) {
            throw new runtime.RequiredError('jobTemplateId','Required parameter requestParameters.jobTemplateId was null or undefined when calling organizationJobTemplateLocalesList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/job_templates/{job_template_id}/locales`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"job_template_id"}}`, encodeURIComponent(String(requestParameters.jobTemplateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobTemplateLocalesFromJSON));
    }

    /**
     * List all job template locales for a given organization job template.
     * List organization job template locales
     */
    async organizationJobTemplateLocalesList(requestParameters: OrganizationJobTemplateLocalesListRequest): Promise<Array<JobTemplateLocales>> {
        const response = await this.organizationJobTemplateLocalesListRaw(requestParameters);
        return await response.value();
    }

}
