/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Invitation,
    InvitationFromJSON,
    InvitationToJSON,
    InvitationCreate422Response,
    InvitationCreate422ResponseFromJSON,
    InvitationCreate422ResponseToJSON,
    InvitationCreateParameters,
    InvitationCreateParametersFromJSON,
    InvitationCreateParametersToJSON,
    InvitationUpdateParameters,
    InvitationUpdateParametersFromJSON,
    InvitationUpdateParametersToJSON,
    InvitationUpdateSettingsParameters,
    InvitationUpdateSettingsParametersFromJSON,
    InvitationUpdateSettingsParametersToJSON,
} from '../models';

export interface InvitationCreateRequest {
    accountId: string;
    invitationCreateParameters: InvitationCreateParameters;
    xPhraseAppOTP?: string;
}

export interface InvitationDeleteRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface InvitationResendRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface InvitationShowRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface InvitationUpdateRequest {
    accountId: string;
    id: string;
    invitationUpdateParameters: InvitationUpdateParameters;
    xPhraseAppOTP?: string;
}

export interface InvitationUpdateSettingsRequest {
    projectId: string;
    id: string;
    invitationUpdateSettingsParameters: InvitationUpdateSettingsParameters;
    xPhraseAppOTP?: string;
}

export interface InvitationsListRequest {
    accountId: string;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
}

/**
 * 
 */
export class InvitationsApi extends runtime.BaseAPI {

    /**
     * Invite a person to an account. Developers and translators need <code>project_ids</code> and <code>locale_ids</code> assigned to access them. Access token scope must include <code>team.manage</code>.
     * Create a new invitation
     */
    async invitationCreateRaw(requestParameters: InvitationCreateRequest): Promise<runtime.ApiResponse<Invitation>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling invitationCreate.');
        }

        if (requestParameters.invitationCreateParameters === null || requestParameters.invitationCreateParameters === undefined) {
            throw new runtime.RequiredError('invitationCreateParameters','Required parameter requestParameters.invitationCreateParameters was null or undefined when calling invitationCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/invitations`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvitationCreateParametersToJSON(requestParameters.invitationCreateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationFromJSON(jsonValue));
    }

    /**
     * Invite a person to an account. Developers and translators need <code>project_ids</code> and <code>locale_ids</code> assigned to access them. Access token scope must include <code>team.manage</code>.
     * Create a new invitation
     */
    async invitationCreate(requestParameters: InvitationCreateRequest): Promise<Invitation> {
        const response = await this.invitationCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an existing invitation (must not be accepted yet). Access token scope must include <code>team.manage</code>.
     * Delete an invitation
     */
    async invitationDeleteRaw(requestParameters: InvitationDeleteRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling invitationDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling invitationDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/invitations/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete an existing invitation (must not be accepted yet). Access token scope must include <code>team.manage</code>.
     * Delete an invitation
     */
    async invitationDelete(requestParameters: InvitationDeleteRequest): Promise<any> {
        const response = await this.invitationDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Resend the invitation email (must not be accepted yet). Access token scope must include <code>team.manage</code>.
     * Resend an invitation
     */
    async invitationResendRaw(requestParameters: InvitationResendRequest): Promise<runtime.ApiResponse<Invitation>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling invitationResend.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling invitationResend.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/invitations/{id}/resend`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationFromJSON(jsonValue));
    }

    /**
     * Resend the invitation email (must not be accepted yet). Access token scope must include <code>team.manage</code>.
     * Resend an invitation
     */
    async invitationResend(requestParameters: InvitationResendRequest): Promise<Invitation> {
        const response = await this.invitationResendRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get details on a single invitation. Access token scope must include <code>team.manage</code>.
     * Get a single invitation
     */
    async invitationShowRaw(requestParameters: InvitationShowRequest): Promise<runtime.ApiResponse<Invitation>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling invitationShow.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling invitationShow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/invitations/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationFromJSON(jsonValue));
    }

    /**
     * Get details on a single invitation. Access token scope must include <code>team.manage</code>.
     * Get a single invitation
     */
    async invitationShow(requestParameters: InvitationShowRequest): Promise<Invitation> {
        const response = await this.invitationShowRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing invitation (must not be accepted yet). The <code>email</code> cannot be updated. Developers and translators need <code>project_ids</code> and <code>locale_ids</code> assigned to access them. Access token scope must include <code>team.manage</code>.
     * Update an invitation
     */
    async invitationUpdateRaw(requestParameters: InvitationUpdateRequest): Promise<runtime.ApiResponse<Invitation>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling invitationUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling invitationUpdate.');
        }

        if (requestParameters.invitationUpdateParameters === null || requestParameters.invitationUpdateParameters === undefined) {
            throw new runtime.RequiredError('invitationUpdateParameters','Required parameter requestParameters.invitationUpdateParameters was null or undefined when calling invitationUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/invitations/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: InvitationUpdateParametersToJSON(requestParameters.invitationUpdateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationFromJSON(jsonValue));
    }

    /**
     * Update an existing invitation (must not be accepted yet). The <code>email</code> cannot be updated. Developers and translators need <code>project_ids</code> and <code>locale_ids</code> assigned to access them. Access token scope must include <code>team.manage</code>.
     * Update an invitation
     */
    async invitationUpdate(requestParameters: InvitationUpdateRequest): Promise<Invitation> {
        const response = await this.invitationUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update member\'s settings in the invitations. Access token scope must include <code>team.manage</code>.
     * Update a member\'s invitation access
     */
    async invitationUpdateSettingsRaw(requestParameters: InvitationUpdateSettingsRequest): Promise<runtime.ApiResponse<Invitation>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling invitationUpdateSettings.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling invitationUpdateSettings.');
        }

        if (requestParameters.invitationUpdateSettingsParameters === null || requestParameters.invitationUpdateSettingsParameters === undefined) {
            throw new runtime.RequiredError('invitationUpdateSettingsParameters','Required parameter requestParameters.invitationUpdateSettingsParameters was null or undefined when calling invitationUpdateSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/invitations/{id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: InvitationUpdateSettingsParametersToJSON(requestParameters.invitationUpdateSettingsParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationFromJSON(jsonValue));
    }

    /**
     * Update member\'s settings in the invitations. Access token scope must include <code>team.manage</code>.
     * Update a member\'s invitation access
     */
    async invitationUpdateSettings(requestParameters: InvitationUpdateSettingsRequest): Promise<Invitation> {
        const response = await this.invitationUpdateSettingsRaw(requestParameters);
        return await response.value();
    }

    /**
     * List invitations for an account. It will also list the accessible resources like projects and locales the invited user has access to. In case nothing is shown the default access from the role is used. Access token scope must include <code>team.manage</code>.
     * List invitations
     */
    async invitationsListRaw(requestParameters: InvitationsListRequest): Promise<runtime.ApiResponse<Array<Invitation>>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling invitationsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/invitations`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InvitationFromJSON));
    }

    /**
     * List invitations for an account. It will also list the accessible resources like projects and locales the invited user has access to. In case nothing is shown the default access from the role is used. Access token scope must include <code>team.manage</code>.
     * List invitations
     */
    async invitationsList(requestParameters: InvitationsListRequest): Promise<Array<Invitation>> {
        const response = await this.invitationsListRaw(requestParameters);
        return await response.value();
    }

}
