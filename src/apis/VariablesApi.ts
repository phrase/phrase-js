/* tslint:disable */
/* eslint-disable */
/**
 * Phrase API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Variable,
    VariableFromJSON,
    VariableToJSON,
    VariableCreateParameters,
    VariableCreateParametersFromJSON,
    VariableCreateParametersToJSON,
    VariableUpdateParameters,
    VariableUpdateParametersFromJSON,
    VariableUpdateParametersToJSON,
} from '../models';

export interface VariableCreateRequest {
    projectId: string;
    variableCreateParameters: VariableCreateParameters;
    xPhraseAppOTP?: string;
}

export interface VariableDeleteRequest {
    projectId: string;
    name: string;
    xPhraseAppOTP?: string;
}

export interface VariableShowRequest {
    projectId: string;
    name: string;
    xPhraseAppOTP?: string;
}

export interface VariableUpdateRequest {
    projectId: string;
    name: string;
    variableUpdateParameters: VariableUpdateParameters;
    xPhraseAppOTP?: string;
}

export interface VariablesListRequest {
    projectId: string;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
}

/**
 * 
 */
export class VariablesApi extends runtime.BaseAPI {

    /**
     * Create a new variable.
     * Create a variable
     */
    async variableCreateRaw(requestParameters: VariableCreateRequest): Promise<runtime.ApiResponse<Variable>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling variableCreate.');
        }

        if (requestParameters.variableCreateParameters === null || requestParameters.variableCreateParameters === undefined) {
            throw new runtime.RequiredError('variableCreateParameters','Required parameter requestParameters.variableCreateParameters was null or undefined when calling variableCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/variables`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VariableCreateParametersToJSON(requestParameters.variableCreateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VariableFromJSON(jsonValue));
    }

    /**
     * Create a new variable.
     * Create a variable
     */
    async variableCreate(requestParameters: VariableCreateRequest): Promise<Variable> {
        const response = await this.variableCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an existing variable.
     * Delete a variable
     */
    async variableDeleteRaw(requestParameters: VariableDeleteRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling variableDelete.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling variableDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/variables/{name}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete an existing variable.
     * Delete a variable
     */
    async variableDelete(requestParameters: VariableDeleteRequest): Promise<any> {
        const response = await this.variableDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get details on a single variable for a given project.
     * Get a single variable
     */
    async variableShowRaw(requestParameters: VariableShowRequest): Promise<runtime.ApiResponse<Variable>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling variableShow.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling variableShow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/variables/{name}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VariableFromJSON(jsonValue));
    }

    /**
     * Get details on a single variable for a given project.
     * Get a single variable
     */
    async variableShow(requestParameters: VariableShowRequest): Promise<Variable> {
        const response = await this.variableShowRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing variable.
     * Update a variable
     */
    async variableUpdateRaw(requestParameters: VariableUpdateRequest): Promise<runtime.ApiResponse<Variable>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling variableUpdate.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling variableUpdate.');
        }

        if (requestParameters.variableUpdateParameters === null || requestParameters.variableUpdateParameters === undefined) {
            throw new runtime.RequiredError('variableUpdateParameters','Required parameter requestParameters.variableUpdateParameters was null or undefined when calling variableUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/variables/{name}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VariableUpdateParametersToJSON(requestParameters.variableUpdateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VariableFromJSON(jsonValue));
    }

    /**
     * Update an existing variable.
     * Update a variable
     */
    async variableUpdate(requestParameters: VariableUpdateRequest): Promise<Variable> {
        const response = await this.variableUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all variables for the current project.
     * List variables
     */
    async variablesListRaw(requestParameters: VariablesListRequest): Promise<runtime.ApiResponse<Array<Variable>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling variablesList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/variables`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VariableFromJSON));
    }

    /**
     * List all variables for the current project.
     * List variables
     */
    async variablesList(requestParameters: VariablesListRequest): Promise<Array<Variable>> {
        const response = await this.variablesListRaw(requestParameters);
        return await response.value();
    }

}
