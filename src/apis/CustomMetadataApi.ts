/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CustomMetadataDataType,
    CustomMetadataDataTypeFromJSON,
    CustomMetadataDataTypeToJSON,
    CustomMetadataProperty,
    CustomMetadataPropertyFromJSON,
    CustomMetadataPropertyToJSON,
    CustomMetadataPropertyCreate422Response,
    CustomMetadataPropertyCreate422ResponseFromJSON,
    CustomMetadataPropertyCreate422ResponseToJSON,
} from '../models';

export interface CustomMetadataPropertiesDeleteRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface CustomMetadataPropertiesListRequest {
    accountId: string;
    xPhraseAppOTP?: string;
    dataType?: CustomMetadataDataType;
    projectId?: string;
    page?: number;
    perPage?: number;
    sort?: string;
    order?: string;
}

export interface CustomMetadataPropertyCreateRequest {
    accountId: string;
    name: string;
    dataType: CustomMetadataDataType;
    xPhraseAppOTP?: string;
    description?: string;
    projectIds?: Array<string>;
    valueOptions?: Array<string>;
}

export interface CustomMetadataPropertyShowRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface CustomMetadataPropertyUpdateRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
    name?: string;
    description?: string;
    projectIds?: Array<string>;
    valueOptions?: Array<string>;
}

/**
 * 
 */
export class CustomMetadataApi extends runtime.BaseAPI {

    /**
     * Destroy a custom metadata property of an account.  This endpoint is only available to accounts with advanced plans or above. 
     * Destroy property
     */
    async customMetadataPropertiesDeleteRaw(requestParameters: CustomMetadataPropertiesDeleteRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling customMetadataPropertiesDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customMetadataPropertiesDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/custom_metadata/properties/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Destroy a custom metadata property of an account.  This endpoint is only available to accounts with advanced plans or above. 
     * Destroy property
     */
    async customMetadataPropertiesDelete(requestParameters: CustomMetadataPropertiesDeleteRequest): Promise<any> {
        const response = await this.customMetadataPropertiesDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all custom metadata properties for an account.  This endpoint is only available to accounts with advanced plans or above. 
     * List properties
     */
    async customMetadataPropertiesListRaw(requestParameters: CustomMetadataPropertiesListRequest): Promise<runtime.ApiResponse<Array<CustomMetadataProperty>>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling customMetadataPropertiesList.');
        }

        const queryParameters: any = {};

        if (requestParameters.dataType !== undefined) {
            queryParameters['data_type'] = requestParameters.dataType;
        }

        if (requestParameters.projectId !== undefined) {
            queryParameters['project_id'] = requestParameters.projectId;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/custom_metadata/properties`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomMetadataPropertyFromJSON));
    }

    /**
     * List all custom metadata properties for an account.  This endpoint is only available to accounts with advanced plans or above. 
     * List properties
     */
    async customMetadataPropertiesList(requestParameters: CustomMetadataPropertiesListRequest): Promise<Array<CustomMetadataProperty>> {
        const response = await this.customMetadataPropertiesListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new custom metadata property.
     * Create a property
     */
    async customMetadataPropertyCreateRaw(requestParameters: CustomMetadataPropertyCreateRequest): Promise<runtime.ApiResponse<CustomMetadataProperty>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling customMetadataPropertyCreate.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling customMetadataPropertyCreate.');
        }

        if (requestParameters.dataType === null || requestParameters.dataType === undefined) {
            throw new runtime.RequiredError('dataType','Required parameter requestParameters.dataType was null or undefined when calling customMetadataPropertyCreate.');
        }

        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.dataType !== undefined) {
            queryParameters['data_type'] = requestParameters.dataType;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.projectIds) {
            queryParameters['project_ids'] = requestParameters.projectIds;
        }

        if (requestParameters.valueOptions) {
            queryParameters['value_options'] = requestParameters.valueOptions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/custom_metadata/properties`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomMetadataPropertyFromJSON(jsonValue));
    }

    /**
     * Create a new custom metadata property.
     * Create a property
     */
    async customMetadataPropertyCreate(requestParameters: CustomMetadataPropertyCreateRequest): Promise<CustomMetadataProperty> {
        const response = await this.customMetadataPropertyCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get details of a single custom property.
     * Get a single property
     */
    async customMetadataPropertyShowRaw(requestParameters: CustomMetadataPropertyShowRequest): Promise<runtime.ApiResponse<CustomMetadataProperty>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling customMetadataPropertyShow.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customMetadataPropertyShow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/custom_metadata/properties/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomMetadataPropertyFromJSON(jsonValue));
    }

    /**
     * Get details of a single custom property.
     * Get a single property
     */
    async customMetadataPropertyShow(requestParameters: CustomMetadataPropertyShowRequest): Promise<CustomMetadataProperty> {
        const response = await this.customMetadataPropertyShowRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing custom metadata property.
     * Update a property
     */
    async customMetadataPropertyUpdateRaw(requestParameters: CustomMetadataPropertyUpdateRequest): Promise<runtime.ApiResponse<CustomMetadataProperty>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling customMetadataPropertyUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customMetadataPropertyUpdate.');
        }

        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.projectIds) {
            queryParameters['project_ids'] = requestParameters.projectIds;
        }

        if (requestParameters.valueOptions) {
            queryParameters['value_options'] = requestParameters.valueOptions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/custom_metadata/properties/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomMetadataPropertyFromJSON(jsonValue));
    }

    /**
     * Update an existing custom metadata property.
     * Update a property
     */
    async customMetadataPropertyUpdate(requestParameters: CustomMetadataPropertyUpdateRequest): Promise<CustomMetadataProperty> {
        const response = await this.customMetadataPropertyUpdateRaw(requestParameters);
        return await response.value();
    }

}
