/* tslint:disable */
/* eslint-disable */
/**
 * Phrase API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Distribution,
    DistributionFromJSON,
    DistributionToJSON,
    DistributionCreateParameters,
    DistributionCreateParametersFromJSON,
    DistributionCreateParametersToJSON,
    DistributionPreview,
    DistributionPreviewFromJSON,
    DistributionPreviewToJSON,
    DistributionUpdateParameters,
    DistributionUpdateParametersFromJSON,
    DistributionUpdateParametersToJSON,
} from '../models';

export interface DistributionCreateRequest {
    accountId: string;
    distributionCreateParameters: DistributionCreateParameters;
    xPhraseAppOTP?: string;
}

export interface DistributionDeleteRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface DistributionShowRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface DistributionUpdateRequest {
    accountId: string;
    id: string;
    distributionUpdateParameters: DistributionUpdateParameters;
    xPhraseAppOTP?: string;
}

export interface DistributionsListRequest {
    accountId: string;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
}

/**
 * 
 */
export class DistributionsApi extends runtime.BaseAPI {

    /**
     * Create a new distribution.
     * Create a distribution
     */
    async distributionCreateRaw(requestParameters: DistributionCreateRequest): Promise<runtime.ApiResponse<Distribution>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling distributionCreate.');
        }

        if (requestParameters.distributionCreateParameters === null || requestParameters.distributionCreateParameters === undefined) {
            throw new runtime.RequiredError('distributionCreateParameters','Required parameter requestParameters.distributionCreateParameters was null or undefined when calling distributionCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/distributions`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DistributionCreateParametersToJSON(requestParameters.distributionCreateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistributionFromJSON(jsonValue));
    }

    /**
     * Create a new distribution.
     * Create a distribution
     */
    async distributionCreate(requestParameters: DistributionCreateRequest): Promise<Distribution> {
        const response = await this.distributionCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an existing distribution.
     * Delete a distribution
     */
    async distributionDeleteRaw(requestParameters: DistributionDeleteRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling distributionDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling distributionDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/distributions/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete an existing distribution.
     * Delete a distribution
     */
    async distributionDelete(requestParameters: DistributionDeleteRequest): Promise<any> {
        const response = await this.distributionDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get details on a single distribution.
     * Get a single distribution
     */
    async distributionShowRaw(requestParameters: DistributionShowRequest): Promise<runtime.ApiResponse<Distribution>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling distributionShow.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling distributionShow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/distributions/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistributionFromJSON(jsonValue));
    }

    /**
     * Get details on a single distribution.
     * Get a single distribution
     */
    async distributionShow(requestParameters: DistributionShowRequest): Promise<Distribution> {
        const response = await this.distributionShowRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing distribution.
     * Update a distribution
     */
    async distributionUpdateRaw(requestParameters: DistributionUpdateRequest): Promise<runtime.ApiResponse<Distribution>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling distributionUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling distributionUpdate.');
        }

        if (requestParameters.distributionUpdateParameters === null || requestParameters.distributionUpdateParameters === undefined) {
            throw new runtime.RequiredError('distributionUpdateParameters','Required parameter requestParameters.distributionUpdateParameters was null or undefined when calling distributionUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/distributions/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DistributionUpdateParametersToJSON(requestParameters.distributionUpdateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistributionFromJSON(jsonValue));
    }

    /**
     * Update an existing distribution.
     * Update a distribution
     */
    async distributionUpdate(requestParameters: DistributionUpdateRequest): Promise<Distribution> {
        const response = await this.distributionUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all distributions for the given account.
     * List distributions
     */
    async distributionsListRaw(requestParameters: DistributionsListRequest): Promise<runtime.ApiResponse<Array<DistributionPreview>>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling distributionsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/distributions`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DistributionPreviewFromJSON));
    }

    /**
     * List all distributions for the given account.
     * List distributions
     */
    async distributionsList(requestParameters: DistributionsListRequest): Promise<Array<DistributionPreview>> {
        const response = await this.distributionsListRaw(requestParameters);
        return await response.value();
    }

}
