/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    RepoSync,
    RepoSyncFromJSON,
    RepoSyncToJSON,
    RepoSyncEvent,
    RepoSyncEventFromJSON,
    RepoSyncEventToJSON,
} from '../models';

export interface RepoSyncActivateRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface RepoSyncDeactivateRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface RepoSyncEventShowRequest {
    accountId: string;
    repoSyncId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface RepoSyncEventsRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface RepoSyncExportRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface RepoSyncImportRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface RepoSyncListRequest {
    accountId: string;
    xPhraseAppOTP?: string;
}

export interface RepoSyncShowRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

/**
 * 
 */
export class RepoSyncsApi extends runtime.BaseAPI {

    /**
     * Activate a deactivated Repo Sync. Active syncs can be used to import and export translations, and imports to Phrase are automatically triggered by pushes to the repository, if configured.
     * Activate a Repo Sync
     */
    async repoSyncActivateRaw(requestParameters: RepoSyncActivateRequest): Promise<runtime.ApiResponse<RepoSync>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling repoSyncActivate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling repoSyncActivate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/repo_syncs/{id}/activate`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RepoSyncFromJSON(jsonValue));
    }

    /**
     * Activate a deactivated Repo Sync. Active syncs can be used to import and export translations, and imports to Phrase are automatically triggered by pushes to the repository, if configured.
     * Activate a Repo Sync
     */
    async repoSyncActivate(requestParameters: RepoSyncActivateRequest): Promise<RepoSync> {
        const response = await this.repoSyncActivateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deactivate an active Repo Sync. Import and export can\'t be performed on deactivated syncs and the pushes to the repository won\'t trigger the import to Phrase.
     * Deactivate a Repo Sync
     */
    async repoSyncDeactivateRaw(requestParameters: RepoSyncDeactivateRequest): Promise<runtime.ApiResponse<RepoSync>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling repoSyncDeactivate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling repoSyncDeactivate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/repo_syncs/{id}/deactivate`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RepoSyncFromJSON(jsonValue));
    }

    /**
     * Deactivate an active Repo Sync. Import and export can\'t be performed on deactivated syncs and the pushes to the repository won\'t trigger the import to Phrase.
     * Deactivate a Repo Sync
     */
    async repoSyncDeactivate(requestParameters: RepoSyncDeactivateRequest): Promise<RepoSync> {
        const response = await this.repoSyncDeactivateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Shows a single Repo Sync event.
     * Get a single Repo Sync Event
     */
    async repoSyncEventShowRaw(requestParameters: RepoSyncEventShowRequest): Promise<runtime.ApiResponse<RepoSyncEvent>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling repoSyncEventShow.');
        }

        if (requestParameters.repoSyncId === null || requestParameters.repoSyncId === undefined) {
            throw new runtime.RequiredError('repoSyncId','Required parameter requestParameters.repoSyncId was null or undefined when calling repoSyncEventShow.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling repoSyncEventShow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/repo_syncs/{repo_sync_id}/events/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"repo_sync_id"}}`, encodeURIComponent(String(requestParameters.repoSyncId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RepoSyncEventFromJSON(jsonValue));
    }

    /**
     * Shows a single Repo Sync event.
     * Get a single Repo Sync Event
     */
    async repoSyncEventShow(requestParameters: RepoSyncEventShowRequest): Promise<RepoSyncEvent> {
        const response = await this.repoSyncEventShowRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the history of a single Repo Sync. The history includes all imports and exports performed by the Repo Sync.
     * Repository Syncs History
     */
    async repoSyncEventsRaw(requestParameters: RepoSyncEventsRequest): Promise<runtime.ApiResponse<Array<RepoSyncEvent>>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling repoSyncEvents.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling repoSyncEvents.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/repo_syncs/{id}/events`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RepoSyncEventFromJSON));
    }

    /**
     * Get the history of a single Repo Sync. The history includes all imports and exports performed by the Repo Sync.
     * Repository Syncs History
     */
    async repoSyncEvents(requestParameters: RepoSyncEventsRequest): Promise<Array<RepoSyncEvent>> {
        const response = await this.repoSyncEventsRaw(requestParameters);
        return await response.value();
    }

    /**
     * > Beta: this feature will change in the future.  Export translations from Phrase Strings to repository provider according to the .phrase.yml file within the code repository.  *Export is done asynchronously and may take several seconds depending on the project size.*
     * Export to code repository
     */
    async repoSyncExportRaw(requestParameters: RepoSyncExportRequest): Promise<runtime.ApiResponse<RepoSyncEvent>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling repoSyncExport.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling repoSyncExport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/repo_syncs/{id}/export`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RepoSyncEventFromJSON(jsonValue));
    }

    /**
     * > Beta: this feature will change in the future.  Export translations from Phrase Strings to repository provider according to the .phrase.yml file within the code repository.  *Export is done asynchronously and may take several seconds depending on the project size.*
     * Export to code repository
     */
    async repoSyncExport(requestParameters: RepoSyncExportRequest): Promise<RepoSyncEvent> {
        const response = await this.repoSyncExportRaw(requestParameters);
        return await response.value();
    }

    /**
     * > Beta: this feature will change in the future.  Import translations from repository provider to Phrase Strings according to the .phrase.yml file within the code repository.  _Import is done asynchronously and may take several seconds depending on the project size._
     * Import from code repository
     */
    async repoSyncImportRaw(requestParameters: RepoSyncImportRequest): Promise<runtime.ApiResponse<RepoSyncEvent>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling repoSyncImport.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling repoSyncImport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/repo_syncs/{id}/import`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RepoSyncEventFromJSON(jsonValue));
    }

    /**
     * > Beta: this feature will change in the future.  Import translations from repository provider to Phrase Strings according to the .phrase.yml file within the code repository.  _Import is done asynchronously and may take several seconds depending on the project size._
     * Import from code repository
     */
    async repoSyncImport(requestParameters: RepoSyncImportRequest): Promise<RepoSyncEvent> {
        const response = await this.repoSyncImportRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all Repo Syncs from an account
     * Get Repo Syncs
     */
    async repoSyncListRaw(requestParameters: RepoSyncListRequest): Promise<runtime.ApiResponse<Array<RepoSync>>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling repoSyncList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/repo_syncs`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RepoSyncFromJSON));
    }

    /**
     * Lists all Repo Syncs from an account
     * Get Repo Syncs
     */
    async repoSyncList(requestParameters: RepoSyncListRequest): Promise<Array<RepoSync>> {
        const response = await this.repoSyncListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Shows a single Repo Sync setting.
     * Get a single Repo Sync
     */
    async repoSyncShowRaw(requestParameters: RepoSyncShowRequest): Promise<runtime.ApiResponse<RepoSync>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling repoSyncShow.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling repoSyncShow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/repo_syncs/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RepoSyncFromJSON(jsonValue));
    }

    /**
     * Shows a single Repo Sync setting.
     * Get a single Repo Sync
     */
    async repoSyncShow(requestParameters: RepoSyncShowRequest): Promise<RepoSync> {
        const response = await this.repoSyncShowRaw(requestParameters);
        return await response.value();
    }

}
