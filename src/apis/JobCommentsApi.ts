/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    JobComment,
    JobCommentFromJSON,
    JobCommentToJSON,
    JobCommentCreateParameters,
    JobCommentCreateParametersFromJSON,
    JobCommentCreateParametersToJSON,
    JobCommentUpdateParameters,
    JobCommentUpdateParametersFromJSON,
    JobCommentUpdateParametersToJSON,
} from '../models';

export interface JobCommentCreateRequest {
    projectId: string;
    jobId: string;
    jobCommentCreateParameters: JobCommentCreateParameters;
    xPhraseAppOTP?: string;
}

export interface JobCommentDeleteRequest {
    projectId: string;
    jobId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
}

export interface JobCommentShowRequest {
    projectId: string;
    jobId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
}

export interface JobCommentUpdateRequest {
    projectId: string;
    keyId: string;
    id: string;
    jobCommentUpdateParameters: JobCommentUpdateParameters;
    xPhraseAppOTP?: string;
}

export interface JobCommentsListRequest {
    projectId: string;
    jobId: string;
    xPhraseAppOTP?: string;
    branch?: string;
}

/**
 * 
 */
export class JobCommentsApi extends runtime.BaseAPI {

    /**
     * Create a new comment for a job.
     * Create a job comment
     */
    async jobCommentCreateRaw(requestParameters: JobCommentCreateRequest): Promise<runtime.ApiResponse<JobComment>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobCommentCreate.');
        }

        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling jobCommentCreate.');
        }

        if (requestParameters.jobCommentCreateParameters === null || requestParameters.jobCommentCreateParameters === undefined) {
            throw new runtime.RequiredError('jobCommentCreateParameters','Required parameter requestParameters.jobCommentCreateParameters was null or undefined when calling jobCommentCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/jobs/{job_id}/comments`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JobCommentCreateParametersToJSON(requestParameters.jobCommentCreateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobCommentFromJSON(jsonValue));
    }

    /**
     * Create a new comment for a job.
     * Create a job comment
     */
    async jobCommentCreate(requestParameters: JobCommentCreateRequest): Promise<JobComment> {
        const response = await this.jobCommentCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an existing job comment.
     * Delete a job comment
     */
    async jobCommentDeleteRaw(requestParameters: JobCommentDeleteRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobCommentDelete.');
        }

        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling jobCommentDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling jobCommentDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/jobs/{job_id}/comments/{id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete an existing job comment.
     * Delete a job comment
     */
    async jobCommentDelete(requestParameters: JobCommentDeleteRequest): Promise<any> {
        const response = await this.jobCommentDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get details on a single job comment.
     * Get a single job comment
     */
    async jobCommentShowRaw(requestParameters: JobCommentShowRequest): Promise<runtime.ApiResponse<JobComment>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobCommentShow.');
        }

        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling jobCommentShow.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling jobCommentShow.');
        }

        const queryParameters: any = {};

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/jobs/{job_id}/comments/{id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobCommentFromJSON(jsonValue));
    }

    /**
     * Get details on a single job comment.
     * Get a single job comment
     */
    async jobCommentShow(requestParameters: JobCommentShowRequest): Promise<JobComment> {
        const response = await this.jobCommentShowRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing job comment.
     * Update a job comment
     */
    async jobCommentUpdateRaw(requestParameters: JobCommentUpdateRequest): Promise<runtime.ApiResponse<JobComment>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobCommentUpdate.');
        }

        if (requestParameters.keyId === null || requestParameters.keyId === undefined) {
            throw new runtime.RequiredError('keyId','Required parameter requestParameters.keyId was null or undefined when calling jobCommentUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling jobCommentUpdate.');
        }

        if (requestParameters.jobCommentUpdateParameters === null || requestParameters.jobCommentUpdateParameters === undefined) {
            throw new runtime.RequiredError('jobCommentUpdateParameters','Required parameter requestParameters.jobCommentUpdateParameters was null or undefined when calling jobCommentUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/jobs/{job_id}/comments/{id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"key_id"}}`, encodeURIComponent(String(requestParameters.keyId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: JobCommentUpdateParametersToJSON(requestParameters.jobCommentUpdateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobCommentFromJSON(jsonValue));
    }

    /**
     * Update an existing job comment.
     * Update a job comment
     */
    async jobCommentUpdate(requestParameters: JobCommentUpdateRequest): Promise<JobComment> {
        const response = await this.jobCommentUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all comments for a job.
     * List job comments
     */
    async jobCommentsListRaw(requestParameters: JobCommentsListRequest): Promise<runtime.ApiResponse<Array<JobComment>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobCommentsList.');
        }

        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling jobCommentsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/jobs/{job_id}/comments`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobCommentFromJSON));
    }

    /**
     * List all comments for a job.
     * List job comments
     */
    async jobCommentsList(requestParameters: JobCommentsListRequest): Promise<Array<JobComment>> {
        const response = await this.jobCommentsListRaw(requestParameters);
        return await response.value();
    }

}
