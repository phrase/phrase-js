/* tslint:disable */
/* eslint-disable */
/**
 * Phrase API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Styleguide,
    StyleguideFromJSON,
    StyleguideToJSON,
    StyleguideCreateParameters,
    StyleguideCreateParametersFromJSON,
    StyleguideCreateParametersToJSON,
    StyleguideDetails,
    StyleguideDetailsFromJSON,
    StyleguideDetailsToJSON,
    StyleguideUpdateParameters,
    StyleguideUpdateParametersFromJSON,
    StyleguideUpdateParametersToJSON,
} from '../models';

export interface StyleguideCreateRequest {
    projectId: string;
    styleguideCreateParameters: StyleguideCreateParameters;
    xPhraseAppOTP?: string;
}

export interface StyleguideDeleteRequest {
    projectId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface StyleguideShowRequest {
    projectId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface StyleguideUpdateRequest {
    projectId: string;
    id: string;
    styleguideUpdateParameters: StyleguideUpdateParameters;
    xPhraseAppOTP?: string;
}

export interface StyleguidesListRequest {
    projectId: string;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
}

/**
 * 
 */
export class StyleGuidesApi extends runtime.BaseAPI {

    /**
     * Create a new style guide.
     * Create a style guide
     */
    async styleguideCreateRaw(requestParameters: StyleguideCreateRequest): Promise<runtime.ApiResponse<StyleguideDetails>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling styleguideCreate.');
        }

        if (requestParameters.styleguideCreateParameters === null || requestParameters.styleguideCreateParameters === undefined) {
            throw new runtime.RequiredError('styleguideCreateParameters','Required parameter requestParameters.styleguideCreateParameters was null or undefined when calling styleguideCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{project_id}/styleguides`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StyleguideCreateParametersToJSON(requestParameters.styleguideCreateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StyleguideDetailsFromJSON(jsonValue));
    }

    /**
     * Create a new style guide.
     * Create a style guide
     */
    async styleguideCreate(requestParameters: StyleguideCreateRequest): Promise<StyleguideDetails> {
        const response = await this.styleguideCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an existing style guide.
     * Delete a style guide
     */
    async styleguideDeleteRaw(requestParameters: StyleguideDeleteRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling styleguideDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling styleguideDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{project_id}/styleguides/{id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete an existing style guide.
     * Delete a style guide
     */
    async styleguideDelete(requestParameters: StyleguideDeleteRequest): Promise<any> {
        const response = await this.styleguideDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get details on a single style guide.
     * Get a single style guide
     */
    async styleguideShowRaw(requestParameters: StyleguideShowRequest): Promise<runtime.ApiResponse<StyleguideDetails>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling styleguideShow.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling styleguideShow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{project_id}/styleguides/{id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StyleguideDetailsFromJSON(jsonValue));
    }

    /**
     * Get details on a single style guide.
     * Get a single style guide
     */
    async styleguideShow(requestParameters: StyleguideShowRequest): Promise<StyleguideDetails> {
        const response = await this.styleguideShowRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing style guide.
     * Update a style guide
     */
    async styleguideUpdateRaw(requestParameters: StyleguideUpdateRequest): Promise<runtime.ApiResponse<StyleguideDetails>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling styleguideUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling styleguideUpdate.');
        }

        if (requestParameters.styleguideUpdateParameters === null || requestParameters.styleguideUpdateParameters === undefined) {
            throw new runtime.RequiredError('styleguideUpdateParameters','Required parameter requestParameters.styleguideUpdateParameters was null or undefined when calling styleguideUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{project_id}/styleguides/{id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: StyleguideUpdateParametersToJSON(requestParameters.styleguideUpdateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StyleguideDetailsFromJSON(jsonValue));
    }

    /**
     * Update an existing style guide.
     * Update a style guide
     */
    async styleguideUpdate(requestParameters: StyleguideUpdateRequest): Promise<StyleguideDetails> {
        const response = await this.styleguideUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all styleguides for the given project.
     * List style guides
     */
    async styleguidesListRaw(requestParameters: StyleguidesListRequest): Promise<runtime.ApiResponse<Array<Styleguide>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling styleguidesList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{project_id}/styleguides`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StyleguideFromJSON));
    }

    /**
     * List all styleguides for the given project.
     * List style guides
     */
    async styleguidesList(requestParameters: StyleguidesListRequest): Promise<Array<Styleguide>> {
        const response = await this.styleguidesListRaw(requestParameters);
        return await response.value();
    }

}
