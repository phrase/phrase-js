/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BitbucketSync,
    BitbucketSyncFromJSON,
    BitbucketSyncToJSON,
    BitbucketSyncExportParameters,
    BitbucketSyncExportParametersFromJSON,
    BitbucketSyncExportParametersToJSON,
    BitbucketSyncExportResponse,
    BitbucketSyncExportResponseFromJSON,
    BitbucketSyncExportResponseToJSON,
    BitbucketSyncImportParameters,
    BitbucketSyncImportParametersFromJSON,
    BitbucketSyncImportParametersToJSON,
} from '../models';

export interface BitbucketSyncExportRequest {
    id: string;
    bitbucketSyncExportParameters: BitbucketSyncExportParameters;
    xPhraseAppOTP?: string;
}

export interface BitbucketSyncImportRequest {
    id: string;
    bitbucketSyncImportParameters: BitbucketSyncImportParameters;
    xPhraseAppOTP?: string;
}

export interface BitbucketSyncsListRequest {
    xPhraseAppOTP?: string;
    accountId?: string;
}

/**
 * 
 */
export class BitbucketSyncApi extends runtime.BaseAPI {

    /**
     * Export translations from Phrase Strings to Bitbucket according to the .phraseapp.yml file within the Bitbucket Repository.
     * Export from Phrase Strings to Bitbucket
     */
    async bitbucketSyncExportRaw(requestParameters: BitbucketSyncExportRequest): Promise<runtime.ApiResponse<BitbucketSyncExportResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling bitbucketSyncExport.');
        }

        if (requestParameters.bitbucketSyncExportParameters === null || requestParameters.bitbucketSyncExportParameters === undefined) {
            throw new runtime.RequiredError('bitbucketSyncExportParameters','Required parameter requestParameters.bitbucketSyncExportParameters was null or undefined when calling bitbucketSyncExport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/bitbucket_syncs/{id}/export`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BitbucketSyncExportParametersToJSON(requestParameters.bitbucketSyncExportParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BitbucketSyncExportResponseFromJSON(jsonValue));
    }

    /**
     * Export translations from Phrase Strings to Bitbucket according to the .phraseapp.yml file within the Bitbucket Repository.
     * Export from Phrase Strings to Bitbucket
     */
    async bitbucketSyncExport(requestParameters: BitbucketSyncExportRequest): Promise<BitbucketSyncExportResponse> {
        const response = await this.bitbucketSyncExportRaw(requestParameters);
        return await response.value();
    }

    /**
     * Import translations from Bitbucket to Phrase Strings according to the .phraseapp.yml file within the Bitbucket repository.
     * Import to Phrase Strings from Bitbucket
     */
    async bitbucketSyncImportRaw(requestParameters: BitbucketSyncImportRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling bitbucketSyncImport.');
        }

        if (requestParameters.bitbucketSyncImportParameters === null || requestParameters.bitbucketSyncImportParameters === undefined) {
            throw new runtime.RequiredError('bitbucketSyncImportParameters','Required parameter requestParameters.bitbucketSyncImportParameters was null or undefined when calling bitbucketSyncImport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/bitbucket_syncs/{id}/import`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BitbucketSyncImportParametersToJSON(requestParameters.bitbucketSyncImportParameters),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Import translations from Bitbucket to Phrase Strings according to the .phraseapp.yml file within the Bitbucket repository.
     * Import to Phrase Strings from Bitbucket
     */
    async bitbucketSyncImport(requestParameters: BitbucketSyncImportRequest): Promise<any> {
        const response = await this.bitbucketSyncImportRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all Bitbucket repositories for which synchronisation with Phrase Strings is activated.
     * List Bitbucket syncs
     */
    async bitbucketSyncsListRaw(requestParameters: BitbucketSyncsListRequest): Promise<runtime.ApiResponse<Array<BitbucketSync>>> {
        const queryParameters: any = {};

        if (requestParameters.accountId !== undefined) {
            queryParameters['account_id'] = requestParameters.accountId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/bitbucket_syncs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BitbucketSyncFromJSON));
    }

    /**
     * List all Bitbucket repositories for which synchronisation with Phrase Strings is activated.
     * List Bitbucket syncs
     */
    async bitbucketSyncsList(requestParameters: BitbucketSyncsListRequest): Promise<Array<BitbucketSync>> {
        const response = await this.bitbucketSyncsListRaw(requestParameters);
        return await response.value();
    }

}
