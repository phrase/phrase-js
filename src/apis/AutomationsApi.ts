/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Automation,
    AutomationFromJSON,
    AutomationToJSON,
    AutomationsCreateParameters,
    AutomationsCreateParametersFromJSON,
    AutomationsCreateParametersToJSON,
    AutomationsCreateParameters1,
    AutomationsCreateParameters1FromJSON,
    AutomationsCreateParameters1ToJSON,
    CustomMetadataPropertyCreate422Response,
    CustomMetadataPropertyCreate422ResponseFromJSON,
    CustomMetadataPropertyCreate422ResponseToJSON,
} from '../models';

export interface AutomationActivateRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface AutomationCreateRequest {
    accountId: string;
    automationsCreateParameters: AutomationsCreateParameters;
    xPhraseAppOTP?: string;
}

export interface AutomationDeactivateRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface AutomationDeleteRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface AutomationShowRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface AutomationUpdateRequest {
    accountId: string;
    id: string;
    automationsCreateParameters1: AutomationsCreateParameters1;
    xPhraseAppOTP?: string;
}

export interface AutomationsListRequest {
    accountId: string;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
}

/**
 * 
 */
export class AutomationsApi extends runtime.BaseAPI {

    /**
     * Activate an automation
     */
    async automationActivateRaw(requestParameters: AutomationActivateRequest): Promise<runtime.ApiResponse<Automation>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling automationActivate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling automationActivate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/automations/{automation_id}/activate`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AutomationFromJSON(jsonValue));
    }

    /**
     * Activate an automation
     */
    async automationActivate(requestParameters: AutomationActivateRequest): Promise<Automation> {
        const response = await this.automationActivateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new automation.
     * Create an automation
     */
    async automationCreateRaw(requestParameters: AutomationCreateRequest): Promise<runtime.ApiResponse<Automation>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling automationCreate.');
        }

        if (requestParameters.automationsCreateParameters === null || requestParameters.automationsCreateParameters === undefined) {
            throw new runtime.RequiredError('automationsCreateParameters','Required parameter requestParameters.automationsCreateParameters was null or undefined when calling automationCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/automations`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AutomationsCreateParametersToJSON(requestParameters.automationsCreateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AutomationFromJSON(jsonValue));
    }

    /**
     * Create a new automation.
     * Create an automation
     */
    async automationCreate(requestParameters: AutomationCreateRequest): Promise<Automation> {
        const response = await this.automationCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deactivate an automation
     */
    async automationDeactivateRaw(requestParameters: AutomationDeactivateRequest): Promise<runtime.ApiResponse<Automation>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling automationDeactivate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling automationDeactivate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/automations/{automation_id}/deactivate`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AutomationFromJSON(jsonValue));
    }

    /**
     * Deactivate an automation
     */
    async automationDeactivate(requestParameters: AutomationDeactivateRequest): Promise<Automation> {
        const response = await this.automationDeactivateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Destroy an automation of an account.  This endpoint is only available to accounts with advanced plans or above. 
     * Destroy automation
     */
    async automationDeleteRaw(requestParameters: AutomationDeleteRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling automationDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling automationDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/automations/{automation_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Destroy an automation of an account.  This endpoint is only available to accounts with advanced plans or above. 
     * Destroy automation
     */
    async automationDelete(requestParameters: AutomationDeleteRequest): Promise<any> {
        const response = await this.automationDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get details of a single automation.
     * Get a single automation
     */
    async automationShowRaw(requestParameters: AutomationShowRequest): Promise<runtime.ApiResponse<Automation>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling automationShow.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling automationShow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/automations/{automation_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AutomationFromJSON(jsonValue));
    }

    /**
     * Get details of a single automation.
     * Get a single automation
     */
    async automationShow(requestParameters: AutomationShowRequest): Promise<Automation> {
        const response = await this.automationShowRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing automation.
     * Update an automation
     */
    async automationUpdateRaw(requestParameters: AutomationUpdateRequest): Promise<runtime.ApiResponse<Automation>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling automationUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling automationUpdate.');
        }

        if (requestParameters.automationsCreateParameters1 === null || requestParameters.automationsCreateParameters1 === undefined) {
            throw new runtime.RequiredError('automationsCreateParameters1','Required parameter requestParameters.automationsCreateParameters1 was null or undefined when calling automationUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/automations/{automation_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AutomationsCreateParameters1ToJSON(requestParameters.automationsCreateParameters1),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AutomationFromJSON(jsonValue));
    }

    /**
     * Update an existing automation.
     * Update an automation
     */
    async automationUpdate(requestParameters: AutomationUpdateRequest): Promise<Automation> {
        const response = await this.automationUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all automations for an account.  This endpoint is only available to accounts with advanced plans or above. 
     * List automations
     */
    async automationsListRaw(requestParameters: AutomationsListRequest): Promise<runtime.ApiResponse<Array<Automation>>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling automationsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/automations`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AutomationFromJSON));
    }

    /**
     * List all automations for an account.  This endpoint is only available to accounts with advanced plans or above. 
     * List automations
     */
    async automationsList(requestParameters: AutomationsListRequest): Promise<Array<Automation>> {
        const response = await this.automationsListRaw(requestParameters);
        return await response.value();
    }

}
