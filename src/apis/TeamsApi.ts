/* tslint:disable */
/* eslint-disable */
/**
 * Phrase API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Team,
    TeamFromJSON,
    TeamToJSON,
    TeamCreateParameters,
    TeamCreateParametersFromJSON,
    TeamCreateParametersToJSON,
    TeamDetail,
    TeamDetailFromJSON,
    TeamDetailToJSON,
    TeamUpdateParameters,
    TeamUpdateParametersFromJSON,
    TeamUpdateParametersToJSON,
    TeamsProjectsCreateParameters,
    TeamsProjectsCreateParametersFromJSON,
    TeamsProjectsCreateParametersToJSON,
    TeamsSpacesCreateParameters,
    TeamsSpacesCreateParametersFromJSON,
    TeamsSpacesCreateParametersToJSON,
    TeamsUsersCreateParameters,
    TeamsUsersCreateParametersFromJSON,
    TeamsUsersCreateParametersToJSON,
} from '../models';

export interface TeamCreateRequest {
    accountId: string;
    teamCreateParameters: TeamCreateParameters;
    xPhraseAppOTP?: string;
}

export interface TeamDeleteRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface TeamShowRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface TeamUpdateRequest {
    accountId: string;
    id: string;
    teamUpdateParameters: TeamUpdateParameters;
    xPhraseAppOTP?: string;
}

export interface TeamsListRequest {
    accountId: string;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
}

export interface TeamsProjectsCreateRequest {
    accountId: string;
    teamId: string;
    teamsProjectsCreateParameters: TeamsProjectsCreateParameters;
    xPhraseAppOTP?: string;
}

export interface TeamsProjectsDeleteRequest {
    accountId: string;
    teamId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface TeamsSpacesCreateRequest {
    accountId: string;
    teamId: string;
    teamsSpacesCreateParameters: TeamsSpacesCreateParameters;
    xPhraseAppOTP?: string;
}

export interface TeamsSpacesDeleteRequest {
    accountId: string;
    teamId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface TeamsUsersCreateRequest {
    accountId: string;
    teamId: string;
    teamsUsersCreateParameters: TeamsUsersCreateParameters;
    xPhraseAppOTP?: string;
}

export interface TeamsUsersDeleteRequest {
    accountId: string;
    teamId: string;
    id: string;
    xPhraseAppOTP?: string;
}

/**
 * 
 */
export class TeamsApi extends runtime.BaseAPI {

    /**
     * Create a new Team.
     * Create a Team
     */
    async teamCreateRaw(requestParameters: TeamCreateRequest): Promise<runtime.ApiResponse<TeamDetail>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling teamCreate.');
        }

        if (requestParameters.teamCreateParameters === null || requestParameters.teamCreateParameters === undefined) {
            throw new runtime.RequiredError('teamCreateParameters','Required parameter requestParameters.teamCreateParameters was null or undefined when calling teamCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/teams`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeamCreateParametersToJSON(requestParameters.teamCreateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDetailFromJSON(jsonValue));
    }

    /**
     * Create a new Team.
     * Create a Team
     */
    async teamCreate(requestParameters: TeamCreateRequest): Promise<TeamDetail> {
        const response = await this.teamCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete the specified Team.
     * Delete Team
     */
    async teamDeleteRaw(requestParameters: TeamDeleteRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling teamDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling teamDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/teams/{team_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete the specified Team.
     * Delete Team
     */
    async teamDelete(requestParameters: TeamDeleteRequest): Promise<any> {
        const response = await this.teamDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Show the specified Team.
     * Get Team
     */
    async teamShowRaw(requestParameters: TeamShowRequest): Promise<runtime.ApiResponse<TeamDetail>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling teamShow.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling teamShow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/teams/{team_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDetailFromJSON(jsonValue));
    }

    /**
     * Show the specified Team.
     * Get Team
     */
    async teamShow(requestParameters: TeamShowRequest): Promise<TeamDetail> {
        const response = await this.teamShowRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update the specified Team.
     * Update Team
     */
    async teamUpdateRaw(requestParameters: TeamUpdateRequest): Promise<runtime.ApiResponse<TeamDetail>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling teamUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling teamUpdate.');
        }

        if (requestParameters.teamUpdateParameters === null || requestParameters.teamUpdateParameters === undefined) {
            throw new runtime.RequiredError('teamUpdateParameters','Required parameter requestParameters.teamUpdateParameters was null or undefined when calling teamUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/teams/{team_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TeamUpdateParametersToJSON(requestParameters.teamUpdateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDetailFromJSON(jsonValue));
    }

    /**
     * Update the specified Team.
     * Update Team
     */
    async teamUpdate(requestParameters: TeamUpdateRequest): Promise<TeamDetail> {
        const response = await this.teamUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all Teams for the given account.
     * List Teams
     */
    async teamsListRaw(requestParameters: TeamsListRequest): Promise<runtime.ApiResponse<Array<Team>>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling teamsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/teams`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamFromJSON));
    }

    /**
     * List all Teams for the given account.
     * List Teams
     */
    async teamsList(requestParameters: TeamsListRequest): Promise<Array<Team>> {
        const response = await this.teamsListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Adds an existing project to the team.
     * Add Project
     */
    async teamsProjectsCreateRaw(requestParameters: TeamsProjectsCreateRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling teamsProjectsCreate.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling teamsProjectsCreate.');
        }

        if (requestParameters.teamsProjectsCreateParameters === null || requestParameters.teamsProjectsCreateParameters === undefined) {
            throw new runtime.RequiredError('teamsProjectsCreateParameters','Required parameter requestParameters.teamsProjectsCreateParameters was null or undefined when calling teamsProjectsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/teams/{team_id}/projects`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeamsProjectsCreateParametersToJSON(requestParameters.teamsProjectsCreateParameters),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Adds an existing project to the team.
     * Add Project
     */
    async teamsProjectsCreate(requestParameters: TeamsProjectsCreateRequest): Promise<any> {
        const response = await this.teamsProjectsCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Removes a specified project from the specified team.
     * Remove Project
     */
    async teamsProjectsDeleteRaw(requestParameters: TeamsProjectsDeleteRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling teamsProjectsDelete.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling teamsProjectsDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling teamsProjectsDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/teams/{team_id}/projects/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Removes a specified project from the specified team.
     * Remove Project
     */
    async teamsProjectsDelete(requestParameters: TeamsProjectsDeleteRequest): Promise<any> {
        const response = await this.teamsProjectsDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Adds an existing space to the team.
     * Add Space
     */
    async teamsSpacesCreateRaw(requestParameters: TeamsSpacesCreateRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling teamsSpacesCreate.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling teamsSpacesCreate.');
        }

        if (requestParameters.teamsSpacesCreateParameters === null || requestParameters.teamsSpacesCreateParameters === undefined) {
            throw new runtime.RequiredError('teamsSpacesCreateParameters','Required parameter requestParameters.teamsSpacesCreateParameters was null or undefined when calling teamsSpacesCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/teams/{team_id}/spaces`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeamsSpacesCreateParametersToJSON(requestParameters.teamsSpacesCreateParameters),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Adds an existing space to the team.
     * Add Space
     */
    async teamsSpacesCreate(requestParameters: TeamsSpacesCreateRequest): Promise<any> {
        const response = await this.teamsSpacesCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Removes a specified space from the specified team.
     * Remove Space
     */
    async teamsSpacesDeleteRaw(requestParameters: TeamsSpacesDeleteRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling teamsSpacesDelete.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling teamsSpacesDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling teamsSpacesDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/teams/{team_id}/spaces/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Removes a specified space from the specified team.
     * Remove Space
     */
    async teamsSpacesDelete(requestParameters: TeamsSpacesDeleteRequest): Promise<any> {
        const response = await this.teamsSpacesDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Adds an existing user to the team.
     * Add User
     */
    async teamsUsersCreateRaw(requestParameters: TeamsUsersCreateRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling teamsUsersCreate.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling teamsUsersCreate.');
        }

        if (requestParameters.teamsUsersCreateParameters === null || requestParameters.teamsUsersCreateParameters === undefined) {
            throw new runtime.RequiredError('teamsUsersCreateParameters','Required parameter requestParameters.teamsUsersCreateParameters was null or undefined when calling teamsUsersCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/teams/{team_id}/users`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeamsUsersCreateParametersToJSON(requestParameters.teamsUsersCreateParameters),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Adds an existing user to the team.
     * Add User
     */
    async teamsUsersCreate(requestParameters: TeamsUsersCreateRequest): Promise<any> {
        const response = await this.teamsUsersCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Removes a specified user from the specified team.
     * Remove User
     */
    async teamsUsersDeleteRaw(requestParameters: TeamsUsersDeleteRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling teamsUsersDelete.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling teamsUsersDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling teamsUsersDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/teams/{team_id}/users/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"team_id"}}`, encodeURIComponent(String(requestParameters.teamId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Removes a specified user from the specified team.
     * Remove User
     */
    async teamsUsersDelete(requestParameters: TeamsUsersDeleteRequest): Promise<any> {
        const response = await this.teamsUsersDeleteRaw(requestParameters);
        return await response.value();
    }

}
