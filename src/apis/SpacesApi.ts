/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Project,
    ProjectFromJSON,
    ProjectToJSON,
    Space,
    SpaceFromJSON,
    SpaceToJSON,
    SpaceCreateParameters,
    SpaceCreateParametersFromJSON,
    SpaceCreateParametersToJSON,
    SpaceUpdateParameters,
    SpaceUpdateParametersFromJSON,
    SpaceUpdateParametersToJSON,
    SpacesProjectsCreateParameters,
    SpacesProjectsCreateParametersFromJSON,
    SpacesProjectsCreateParametersToJSON,
} from '../models';

export interface SpaceCreateRequest {
    accountId: string;
    spaceCreateParameters: SpaceCreateParameters;
    xPhraseAppOTP?: string;
}

export interface SpaceDeleteRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface SpaceShowRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface SpaceUpdateRequest {
    accountId: string;
    id: string;
    spaceUpdateParameters: SpaceUpdateParameters;
    xPhraseAppOTP?: string;
}

export interface SpacesListRequest {
    accountId: string;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
}

export interface SpacesProjectsCreateRequest {
    accountId: string;
    spaceId: string;
    spacesProjectsCreateParameters: SpacesProjectsCreateParameters;
    xPhraseAppOTP?: string;
}

export interface SpacesProjectsDeleteRequest {
    accountId: string;
    spaceId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface SpacesProjectsListRequest {
    accountId: string;
    spaceId: string;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
}

/**
 * 
 */
export class SpacesApi extends runtime.BaseAPI {

    /**
     * Create a new Space.
     * Create a Space
     */
    async spaceCreateRaw(requestParameters: SpaceCreateRequest): Promise<runtime.ApiResponse<Space>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling spaceCreate.');
        }

        if (requestParameters.spaceCreateParameters === null || requestParameters.spaceCreateParameters === undefined) {
            throw new runtime.RequiredError('spaceCreateParameters','Required parameter requestParameters.spaceCreateParameters was null or undefined when calling spaceCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/spaces`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SpaceCreateParametersToJSON(requestParameters.spaceCreateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SpaceFromJSON(jsonValue));
    }

    /**
     * Create a new Space.
     * Create a Space
     */
    async spaceCreate(requestParameters: SpaceCreateRequest): Promise<Space> {
        const response = await this.spaceCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete the specified Space.
     * Delete Space
     */
    async spaceDeleteRaw(requestParameters: SpaceDeleteRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling spaceDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling spaceDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/spaces/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete the specified Space.
     * Delete Space
     */
    async spaceDelete(requestParameters: SpaceDeleteRequest): Promise<any> {
        const response = await this.spaceDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Show the specified Space.
     * Get Space
     */
    async spaceShowRaw(requestParameters: SpaceShowRequest): Promise<runtime.ApiResponse<Space>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling spaceShow.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling spaceShow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/spaces/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SpaceFromJSON(jsonValue));
    }

    /**
     * Show the specified Space.
     * Get Space
     */
    async spaceShow(requestParameters: SpaceShowRequest): Promise<Space> {
        const response = await this.spaceShowRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update the specified Space.
     * Update Space
     */
    async spaceUpdateRaw(requestParameters: SpaceUpdateRequest): Promise<runtime.ApiResponse<Space>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling spaceUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling spaceUpdate.');
        }

        if (requestParameters.spaceUpdateParameters === null || requestParameters.spaceUpdateParameters === undefined) {
            throw new runtime.RequiredError('spaceUpdateParameters','Required parameter requestParameters.spaceUpdateParameters was null or undefined when calling spaceUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/spaces/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SpaceUpdateParametersToJSON(requestParameters.spaceUpdateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SpaceFromJSON(jsonValue));
    }

    /**
     * Update the specified Space.
     * Update Space
     */
    async spaceUpdate(requestParameters: SpaceUpdateRequest): Promise<Space> {
        const response = await this.spaceUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all Spaces for the given account.
     * List Spaces
     */
    async spacesListRaw(requestParameters: SpacesListRequest): Promise<runtime.ApiResponse<Array<Space>>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling spacesList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/spaces`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SpaceFromJSON));
    }

    /**
     * List all Spaces for the given account.
     * List Spaces
     */
    async spacesList(requestParameters: SpacesListRequest): Promise<Array<Space>> {
        const response = await this.spacesListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Adds an existing project to the space.
     * Add Project to Space
     */
    async spacesProjectsCreateRaw(requestParameters: SpacesProjectsCreateRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling spacesProjectsCreate.');
        }

        if (requestParameters.spaceId === null || requestParameters.spaceId === undefined) {
            throw new runtime.RequiredError('spaceId','Required parameter requestParameters.spaceId was null or undefined when calling spacesProjectsCreate.');
        }

        if (requestParameters.spacesProjectsCreateParameters === null || requestParameters.spacesProjectsCreateParameters === undefined) {
            throw new runtime.RequiredError('spacesProjectsCreateParameters','Required parameter requestParameters.spacesProjectsCreateParameters was null or undefined when calling spacesProjectsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/spaces/{space_id}/projects`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"space_id"}}`, encodeURIComponent(String(requestParameters.spaceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SpacesProjectsCreateParametersToJSON(requestParameters.spacesProjectsCreateParameters),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Adds an existing project to the space.
     * Add Project to Space
     */
    async spacesProjectsCreate(requestParameters: SpacesProjectsCreateRequest): Promise<any> {
        const response = await this.spacesProjectsCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Removes a specified project from the specified space.
     * Remove Project from Space
     */
    async spacesProjectsDeleteRaw(requestParameters: SpacesProjectsDeleteRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling spacesProjectsDelete.');
        }

        if (requestParameters.spaceId === null || requestParameters.spaceId === undefined) {
            throw new runtime.RequiredError('spaceId','Required parameter requestParameters.spaceId was null or undefined when calling spacesProjectsDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling spacesProjectsDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/spaces/{space_id}/projects/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"space_id"}}`, encodeURIComponent(String(requestParameters.spaceId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Removes a specified project from the specified space.
     * Remove Project from Space
     */
    async spacesProjectsDelete(requestParameters: SpacesProjectsDeleteRequest): Promise<any> {
        const response = await this.spacesProjectsDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all projects for the specified Space.
     * List Projects in Space
     */
    async spacesProjectsListRaw(requestParameters: SpacesProjectsListRequest): Promise<runtime.ApiResponse<Array<Project>>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling spacesProjectsList.');
        }

        if (requestParameters.spaceId === null || requestParameters.spaceId === undefined) {
            throw new runtime.RequiredError('spaceId','Required parameter requestParameters.spaceId was null or undefined when calling spacesProjectsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/spaces/{space_id}/projects`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"space_id"}}`, encodeURIComponent(String(requestParameters.spaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectFromJSON));
    }

    /**
     * List all projects for the specified Space.
     * List Projects in Space
     */
    async spacesProjectsList(requestParameters: SpacesProjectsListRequest): Promise<Array<Project>> {
        const response = await this.spacesProjectsListRaw(requestParameters);
        return await response.value();
    }

}
