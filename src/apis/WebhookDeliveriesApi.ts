/* tslint:disable */
/* eslint-disable */
/**
 * Phrase API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    WebhookDelivery,
    WebhookDeliveryFromJSON,
    WebhookDeliveryToJSON,
} from '../models';

export interface WebhookDeliveriesListRequest {
    projectId: string;
    webhookId: string;
    xPhraseAppOTP?: string;
    responseStatusCodes?: string;
}

export interface WebhookDeliveriesRedeliverRequest {
    projectId: string;
    webhookId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface WebhookDeliveriesShowRequest {
    projectId: string;
    webhookId: string;
    id: string;
    xPhraseAppOTP?: string;
}

/**
 * 
 */
export class WebhookDeliveriesApi extends runtime.BaseAPI {

    /**
     * List all webhook deliveries for the given webhook_id.
     * List webhook deliveries
     */
    async webhookDeliveriesListRaw(requestParameters: WebhookDeliveriesListRequest): Promise<runtime.ApiResponse<Array<WebhookDelivery>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling webhookDeliveriesList.');
        }

        if (requestParameters.webhookId === null || requestParameters.webhookId === undefined) {
            throw new runtime.RequiredError('webhookId','Required parameter requestParameters.webhookId was null or undefined when calling webhookDeliveriesList.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseStatusCodes !== undefined) {
            queryParameters['response_status_codes'] = requestParameters.responseStatusCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/webhooks/{webhook_id}/deliveries`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"webhook_id"}}`, encodeURIComponent(String(requestParameters.webhookId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WebhookDeliveryFromJSON));
    }

    /**
     * List all webhook deliveries for the given webhook_id.
     * List webhook deliveries
     */
    async webhookDeliveriesList(requestParameters: WebhookDeliveriesListRequest): Promise<Array<WebhookDelivery>> {
        const response = await this.webhookDeliveriesListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Trigger an individual webhook delivery to be redelivered.
     * Redeliver a single webhook delivery
     */
    async webhookDeliveriesRedeliverRaw(requestParameters: WebhookDeliveriesRedeliverRequest): Promise<runtime.ApiResponse<WebhookDelivery>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling webhookDeliveriesRedeliver.');
        }

        if (requestParameters.webhookId === null || requestParameters.webhookId === undefined) {
            throw new runtime.RequiredError('webhookId','Required parameter requestParameters.webhookId was null or undefined when calling webhookDeliveriesRedeliver.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling webhookDeliveriesRedeliver.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/webhooks/{webhook_id}/deliveries/{id}/redeliver`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"webhook_id"}}`, encodeURIComponent(String(requestParameters.webhookId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookDeliveryFromJSON(jsonValue));
    }

    /**
     * Trigger an individual webhook delivery to be redelivered.
     * Redeliver a single webhook delivery
     */
    async webhookDeliveriesRedeliver(requestParameters: WebhookDeliveriesRedeliverRequest): Promise<WebhookDelivery> {
        const response = await this.webhookDeliveriesRedeliverRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all information about a single webhook delivery for the given ID.
     * Get a single webhook delivery
     */
    async webhookDeliveriesShowRaw(requestParameters: WebhookDeliveriesShowRequest): Promise<runtime.ApiResponse<WebhookDelivery>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling webhookDeliveriesShow.');
        }

        if (requestParameters.webhookId === null || requestParameters.webhookId === undefined) {
            throw new runtime.RequiredError('webhookId','Required parameter requestParameters.webhookId was null or undefined when calling webhookDeliveriesShow.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling webhookDeliveriesShow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/webhooks/{webhook_id}/deliveries/{id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"webhook_id"}}`, encodeURIComponent(String(requestParameters.webhookId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookDeliveryFromJSON(jsonValue));
    }

    /**
     * Get all information about a single webhook delivery for the given ID.
     * Get a single webhook delivery
     */
    async webhookDeliveriesShow(requestParameters: WebhookDeliveriesShowRequest): Promise<WebhookDelivery> {
        const response = await this.webhookDeliveriesShowRaw(requestParameters);
        return await response.value();
    }

}
