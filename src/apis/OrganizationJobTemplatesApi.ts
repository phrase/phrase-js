/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    OrganizationJobTemplate,
    OrganizationJobTemplateFromJSON,
    OrganizationJobTemplateToJSON,
    OrganizationJobTemplateCreateParameters,
    OrganizationJobTemplateCreateParametersFromJSON,
    OrganizationJobTemplateCreateParametersToJSON,
    OrganizationJobTemplateDetails,
    OrganizationJobTemplateDetailsFromJSON,
    OrganizationJobTemplateDetailsToJSON,
    OrganizationJobTemplateUpdateParameters,
    OrganizationJobTemplateUpdateParametersFromJSON,
    OrganizationJobTemplateUpdateParametersToJSON,
} from '../models';

export interface OrganizationJobTemplateCreateRequest {
    accountId: string;
    organizationJobTemplateCreateParameters: OrganizationJobTemplateCreateParameters;
    xPhraseAppOTP?: string;
}

export interface OrganizationJobTemplateDeleteRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

export interface OrganizationJobTemplateUpdateRequest {
    accountId: string;
    id: string;
    organizationJobTemplateUpdateParameters: OrganizationJobTemplateUpdateParameters;
    xPhraseAppOTP?: string;
}

export interface OrganizationJobTemplatesListRequest {
    accountId: string;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
}

export interface OrganizationJobTemplatesShowRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}

/**
 * 
 */
export class OrganizationJobTemplatesApi extends runtime.BaseAPI {

    /**
     * Create a new organization job template.
     * Create an organization job template
     */
    async organizationJobTemplateCreateRaw(requestParameters: OrganizationJobTemplateCreateRequest): Promise<runtime.ApiResponse<OrganizationJobTemplateDetails>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling organizationJobTemplateCreate.');
        }

        if (requestParameters.organizationJobTemplateCreateParameters === null || requestParameters.organizationJobTemplateCreateParameters === undefined) {
            throw new runtime.RequiredError('organizationJobTemplateCreateParameters','Required parameter requestParameters.organizationJobTemplateCreateParameters was null or undefined when calling organizationJobTemplateCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/job_templates`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationJobTemplateCreateParametersToJSON(requestParameters.organizationJobTemplateCreateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationJobTemplateDetailsFromJSON(jsonValue));
    }

    /**
     * Create a new organization job template.
     * Create an organization job template
     */
    async organizationJobTemplateCreate(requestParameters: OrganizationJobTemplateCreateRequest): Promise<OrganizationJobTemplateDetails> {
        const response = await this.organizationJobTemplateCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an existing organization job template.
     * Delete an organization job template
     */
    async organizationJobTemplateDeleteRaw(requestParameters: OrganizationJobTemplateDeleteRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling organizationJobTemplateDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organizationJobTemplateDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/job_templates/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete an existing organization job template.
     * Delete an organization job template
     */
    async organizationJobTemplateDelete(requestParameters: OrganizationJobTemplateDeleteRequest): Promise<any> {
        const response = await this.organizationJobTemplateDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing organization job template.
     * Update an organization job template
     */
    async organizationJobTemplateUpdateRaw(requestParameters: OrganizationJobTemplateUpdateRequest): Promise<runtime.ApiResponse<OrganizationJobTemplateDetails>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling organizationJobTemplateUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organizationJobTemplateUpdate.');
        }

        if (requestParameters.organizationJobTemplateUpdateParameters === null || requestParameters.organizationJobTemplateUpdateParameters === undefined) {
            throw new runtime.RequiredError('organizationJobTemplateUpdateParameters','Required parameter requestParameters.organizationJobTemplateUpdateParameters was null or undefined when calling organizationJobTemplateUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/job_templates/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationJobTemplateUpdateParametersToJSON(requestParameters.organizationJobTemplateUpdateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationJobTemplateDetailsFromJSON(jsonValue));
    }

    /**
     * Update an existing organization job template.
     * Update an organization job template
     */
    async organizationJobTemplateUpdate(requestParameters: OrganizationJobTemplateUpdateRequest): Promise<OrganizationJobTemplateDetails> {
        const response = await this.organizationJobTemplateUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all job templates for the given account.
     * List organization job templates
     */
    async organizationJobTemplatesListRaw(requestParameters: OrganizationJobTemplatesListRequest): Promise<runtime.ApiResponse<Array<OrganizationJobTemplate>>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling organizationJobTemplatesList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/job_templates`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganizationJobTemplateFromJSON));
    }

    /**
     * List all job templates for the given account.
     * List organization job templates
     */
    async organizationJobTemplatesList(requestParameters: OrganizationJobTemplatesListRequest): Promise<Array<OrganizationJobTemplate>> {
        const response = await this.organizationJobTemplatesListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get details on a single organization job template for a given account.
     * Get a single organization job template
     */
    async organizationJobTemplatesShowRaw(requestParameters: OrganizationJobTemplatesShowRequest): Promise<runtime.ApiResponse<OrganizationJobTemplateDetails>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling organizationJobTemplatesShow.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organizationJobTemplatesShow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account_id}/job_templates/{id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationJobTemplateDetailsFromJSON(jsonValue));
    }

    /**
     * Get details on a single organization job template for a given account.
     * Get a single organization job template
     */
    async organizationJobTemplatesShow(requestParameters: OrganizationJobTemplatesShowRequest): Promise<OrganizationJobTemplateDetails> {
        const response = await this.organizationJobTemplatesShowRaw(requestParameters);
        return await response.value();
    }

}
