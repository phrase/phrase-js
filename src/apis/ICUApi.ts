/* tslint:disable */
/* eslint-disable */
/**
 * Phrase API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Icu,
    IcuFromJSON,
    IcuToJSON,
    IcuSkeletonParameters,
    IcuSkeletonParametersFromJSON,
    IcuSkeletonParametersToJSON,
} from '../models';

export interface IcuSkeletonRequest {
    icuSkeletonParameters: IcuSkeletonParameters;
    xPhraseAppOTP?: string;
}

/**
 * 
 */
export class ICUApi extends runtime.BaseAPI {

    /**
     * Returns icu skeletons for multiple locale codes based on a source content.
     * Build icu skeletons
     */
    async icuSkeletonRaw(requestParameters: IcuSkeletonRequest): Promise<runtime.ApiResponse<Icu>> {
        if (requestParameters.icuSkeletonParameters === null || requestParameters.icuSkeletonParameters === undefined) {
            throw new runtime.RequiredError('icuSkeletonParameters','Required parameter requestParameters.icuSkeletonParameters was null or undefined when calling icuSkeleton.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/icu/skeleton`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IcuSkeletonParametersToJSON(requestParameters.icuSkeletonParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IcuFromJSON(jsonValue));
    }

    /**
     * Returns icu skeletons for multiple locale codes based on a source content.
     * Build icu skeletons
     */
    async icuSkeleton(requestParameters: IcuSkeletonRequest): Promise<Icu> {
        const response = await this.icuSkeletonRaw(requestParameters);
        return await response.value();
    }

}
