/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LocaleReport,
    LocaleReportFromJSON,
    LocaleReportToJSON,
    ProjectReport,
    ProjectReportFromJSON,
    ProjectReportToJSON,
} from '../models';

export interface ReportLocalesListRequest {
    projectId: string;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
    localeCodes?: string;
    tag?: string;
    branch?: string;
}

export interface ReportShowRequest {
    projectId: string;
    xPhraseAppOTP?: string;
    branch?: string;
}

/**
 * 
 */
export class ReportsApi extends runtime.BaseAPI {

    /**
     * List all locale reports for the given project
     * List Locale Reports
     */
    async reportLocalesListRaw(requestParameters: ReportLocalesListRequest): Promise<runtime.ApiResponse<Array<LocaleReport>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling reportLocalesList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        if (requestParameters.localeCodes !== undefined) {
            queryParameters['locale_codes'] = requestParameters.localeCodes;
        }

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/report/locales`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocaleReportFromJSON));
    }

    /**
     * List all locale reports for the given project
     * List Locale Reports
     */
    async reportLocalesList(requestParameters: ReportLocalesListRequest): Promise<Array<LocaleReport>> {
        const response = await this.reportLocalesListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get report of a single project.
     * Get Project Report
     */
    async reportShowRaw(requestParameters: ReportShowRequest): Promise<runtime.ApiResponse<ProjectReport>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling reportShow.');
        }

        const queryParameters: any = {};

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/report`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectReportFromJSON(jsonValue));
    }

    /**
     * Get report of a single project.
     * Get Project Report
     */
    async reportShow(requestParameters: ReportShowRequest): Promise<ProjectReport> {
        const response = await this.reportShowRaw(requestParameters);
        return await response.value();
    }

}
