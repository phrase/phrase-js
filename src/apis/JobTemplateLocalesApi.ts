/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    JobTemplateLocaleUpdateParameters,
    JobTemplateLocaleUpdateParametersFromJSON,
    JobTemplateLocaleUpdateParametersToJSON,
    JobTemplateLocales,
    JobTemplateLocalesFromJSON,
    JobTemplateLocalesToJSON,
    JobTemplateLocalesCreateParameters,
    JobTemplateLocalesCreateParametersFromJSON,
    JobTemplateLocalesCreateParametersToJSON,
} from '../models';

export interface JobTemplateLocaleDeleteRequest {
    projectId: string;
    jobTemplateId: string;
    jobTemplateLocaleId: string;
    xPhraseAppOTP?: string;
    branch?: string;
}

export interface JobTemplateLocaleShowRequest {
    projectId: string;
    jobTemplateId: string;
    jobTemplateLocaleId: string;
    xPhraseAppOTP?: string;
    branch?: string;
}

export interface JobTemplateLocaleUpdateRequest {
    projectId: string;
    jobTemplateId: string;
    jobTemplateLocaleId: string;
    jobTemplateLocaleUpdateParameters: JobTemplateLocaleUpdateParameters;
    xPhraseAppOTP?: string;
}

export interface JobTemplateLocalesCreateRequest {
    projectId: string;
    jobTemplateId: string;
    jobTemplateLocalesCreateParameters: JobTemplateLocalesCreateParameters;
    xPhraseAppOTP?: string;
}

export interface JobTemplateLocalesListRequest {
    projectId: string;
    jobTemplateId: string;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
    branch?: string;
}

/**
 * 
 */
export class JobTemplateLocalesApi extends runtime.BaseAPI {

    /**
     * Delete an existing job template locale.
     * Delete a job template locale
     */
    async jobTemplateLocaleDeleteRaw(requestParameters: JobTemplateLocaleDeleteRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobTemplateLocaleDelete.');
        }

        if (requestParameters.jobTemplateId === null || requestParameters.jobTemplateId === undefined) {
            throw new runtime.RequiredError('jobTemplateId','Required parameter requestParameters.jobTemplateId was null or undefined when calling jobTemplateLocaleDelete.');
        }

        if (requestParameters.jobTemplateLocaleId === null || requestParameters.jobTemplateLocaleId === undefined) {
            throw new runtime.RequiredError('jobTemplateLocaleId','Required parameter requestParameters.jobTemplateLocaleId was null or undefined when calling jobTemplateLocaleDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/job_templates/{job_template_id}/locales/{job_template_locale_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"job_template_id"}}`, encodeURIComponent(String(requestParameters.jobTemplateId))).replace(`{${"job_template_locale_id"}}`, encodeURIComponent(String(requestParameters.jobTemplateLocaleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete an existing job template locale.
     * Delete a job template locale
     */
    async jobTemplateLocaleDelete(requestParameters: JobTemplateLocaleDeleteRequest): Promise<any> {
        const response = await this.jobTemplateLocaleDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a single job template locale for a given job template.
     * Get a single job template locale
     */
    async jobTemplateLocaleShowRaw(requestParameters: JobTemplateLocaleShowRequest): Promise<runtime.ApiResponse<JobTemplateLocales>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobTemplateLocaleShow.');
        }

        if (requestParameters.jobTemplateId === null || requestParameters.jobTemplateId === undefined) {
            throw new runtime.RequiredError('jobTemplateId','Required parameter requestParameters.jobTemplateId was null or undefined when calling jobTemplateLocaleShow.');
        }

        if (requestParameters.jobTemplateLocaleId === null || requestParameters.jobTemplateLocaleId === undefined) {
            throw new runtime.RequiredError('jobTemplateLocaleId','Required parameter requestParameters.jobTemplateLocaleId was null or undefined when calling jobTemplateLocaleShow.');
        }

        const queryParameters: any = {};

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/job_templates/{job_template_id}/locales/{job_template_locale_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"job_template_id"}}`, encodeURIComponent(String(requestParameters.jobTemplateId))).replace(`{${"job_template_locale_id"}}`, encodeURIComponent(String(requestParameters.jobTemplateLocaleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobTemplateLocalesFromJSON(jsonValue));
    }

    /**
     * Get a single job template locale for a given job template.
     * Get a single job template locale
     */
    async jobTemplateLocaleShow(requestParameters: JobTemplateLocaleShowRequest): Promise<JobTemplateLocales> {
        const response = await this.jobTemplateLocaleShowRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing job template locale.
     * Update a job template locale
     */
    async jobTemplateLocaleUpdateRaw(requestParameters: JobTemplateLocaleUpdateRequest): Promise<runtime.ApiResponse<JobTemplateLocales>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobTemplateLocaleUpdate.');
        }

        if (requestParameters.jobTemplateId === null || requestParameters.jobTemplateId === undefined) {
            throw new runtime.RequiredError('jobTemplateId','Required parameter requestParameters.jobTemplateId was null or undefined when calling jobTemplateLocaleUpdate.');
        }

        if (requestParameters.jobTemplateLocaleId === null || requestParameters.jobTemplateLocaleId === undefined) {
            throw new runtime.RequiredError('jobTemplateLocaleId','Required parameter requestParameters.jobTemplateLocaleId was null or undefined when calling jobTemplateLocaleUpdate.');
        }

        if (requestParameters.jobTemplateLocaleUpdateParameters === null || requestParameters.jobTemplateLocaleUpdateParameters === undefined) {
            throw new runtime.RequiredError('jobTemplateLocaleUpdateParameters','Required parameter requestParameters.jobTemplateLocaleUpdateParameters was null or undefined when calling jobTemplateLocaleUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/job_templates/{job_template_id}/locales/{job_template_locale_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"job_template_id"}}`, encodeURIComponent(String(requestParameters.jobTemplateId))).replace(`{${"job_template_locale_id"}}`, encodeURIComponent(String(requestParameters.jobTemplateLocaleId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: JobTemplateLocaleUpdateParametersToJSON(requestParameters.jobTemplateLocaleUpdateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobTemplateLocalesFromJSON(jsonValue));
    }

    /**
     * Update an existing job template locale.
     * Update a job template locale
     */
    async jobTemplateLocaleUpdate(requestParameters: JobTemplateLocaleUpdateRequest): Promise<JobTemplateLocales> {
        const response = await this.jobTemplateLocaleUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new job template locale.
     * Create a job template locale
     */
    async jobTemplateLocalesCreateRaw(requestParameters: JobTemplateLocalesCreateRequest): Promise<runtime.ApiResponse<JobTemplateLocales>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobTemplateLocalesCreate.');
        }

        if (requestParameters.jobTemplateId === null || requestParameters.jobTemplateId === undefined) {
            throw new runtime.RequiredError('jobTemplateId','Required parameter requestParameters.jobTemplateId was null or undefined when calling jobTemplateLocalesCreate.');
        }

        if (requestParameters.jobTemplateLocalesCreateParameters === null || requestParameters.jobTemplateLocalesCreateParameters === undefined) {
            throw new runtime.RequiredError('jobTemplateLocalesCreateParameters','Required parameter requestParameters.jobTemplateLocalesCreateParameters was null or undefined when calling jobTemplateLocalesCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/job_templates/{job_template_id}/locales`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"job_template_id"}}`, encodeURIComponent(String(requestParameters.jobTemplateId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JobTemplateLocalesCreateParametersToJSON(requestParameters.jobTemplateLocalesCreateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobTemplateLocalesFromJSON(jsonValue));
    }

    /**
     * Create a new job template locale.
     * Create a job template locale
     */
    async jobTemplateLocalesCreate(requestParameters: JobTemplateLocalesCreateRequest): Promise<JobTemplateLocales> {
        const response = await this.jobTemplateLocalesCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all job template locales for a given job template.
     * List job template locales
     */
    async jobTemplateLocalesListRaw(requestParameters: JobTemplateLocalesListRequest): Promise<runtime.ApiResponse<Array<JobTemplateLocales>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling jobTemplateLocalesList.');
        }

        if (requestParameters.jobTemplateId === null || requestParameters.jobTemplateId === undefined) {
            throw new runtime.RequiredError('jobTemplateId','Required parameter requestParameters.jobTemplateId was null or undefined when calling jobTemplateLocalesList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/job_templates/{job_template_id}/locales`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"job_template_id"}}`, encodeURIComponent(String(requestParameters.jobTemplateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobTemplateLocalesFromJSON));
    }

    /**
     * List all job template locales for a given job template.
     * List job template locales
     */
    async jobTemplateLocalesList(requestParameters: JobTemplateLocalesListRequest): Promise<Array<JobTemplateLocales>> {
        const response = await this.jobTemplateLocalesListRaw(requestParameters);
        return await response.value();
    }

}
