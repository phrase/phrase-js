/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LocaleDownload,
    LocaleDownloadFromJSON,
    LocaleDownloadToJSON,
    LocaleDownloadCreateParameters,
    LocaleDownloadCreateParametersFromJSON,
    LocaleDownloadCreateParametersToJSON,
} from '../models';

export interface LocaleDownloadCreateRequest {
    projectId: string;
    localeId: string;
    localeDownloadCreateParameters: LocaleDownloadCreateParameters;
    xPhraseAppOTP?: string;
    ifModifiedSince?: string;
    ifNoneMatch?: string;
}

export interface LocaleDownloadShowRequest {
    projectId: string;
    localeId: string;
    id: string;
    xPhraseAppOTP?: string;
    ifModifiedSince?: string;
    ifNoneMatch?: string;
}

/**
 * 
 */
export class LocaleDownloadsApi extends runtime.BaseAPI {

    /**
     * Prepare a locale for download in a specific file format.
     * Initiate async download of a locale
     */
    async localeDownloadCreateRaw(requestParameters: LocaleDownloadCreateRequest): Promise<runtime.ApiResponse<LocaleDownload>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling localeDownloadCreate.');
        }

        if (requestParameters.localeId === null || requestParameters.localeId === undefined) {
            throw new runtime.RequiredError('localeId','Required parameter requestParameters.localeId was null or undefined when calling localeDownloadCreate.');
        }

        if (requestParameters.localeDownloadCreateParameters === null || requestParameters.localeDownloadCreateParameters === undefined) {
            throw new runtime.RequiredError('localeDownloadCreateParameters','Required parameter requestParameters.localeDownloadCreateParameters was null or undefined when calling localeDownloadCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (requestParameters.ifModifiedSince !== undefined && requestParameters.ifModifiedSince !== null) {
            headerParameters['If-Modified-Since'] = String(requestParameters.ifModifiedSince);
        }

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/locales/{locale_id}/downloads`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"locale_id"}}`, encodeURIComponent(String(requestParameters.localeId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocaleDownloadCreateParametersToJSON(requestParameters.localeDownloadCreateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LocaleDownloadFromJSON(jsonValue));
    }

    /**
     * Prepare a locale for download in a specific file format.
     * Initiate async download of a locale
     */
    async localeDownloadCreate(requestParameters: LocaleDownloadCreateRequest): Promise<LocaleDownload> {
        const response = await this.localeDownloadCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Show status of already started async locale download. If the download is finished, the download link will be returned.
     * Show status of an async locale download
     */
    async localeDownloadShowRaw(requestParameters: LocaleDownloadShowRequest): Promise<runtime.ApiResponse<LocaleDownload>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling localeDownloadShow.');
        }

        if (requestParameters.localeId === null || requestParameters.localeId === undefined) {
            throw new runtime.RequiredError('localeId','Required parameter requestParameters.localeId was null or undefined when calling localeDownloadShow.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling localeDownloadShow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (requestParameters.ifModifiedSince !== undefined && requestParameters.ifModifiedSince !== null) {
            headerParameters['If-Modified-Since'] = String(requestParameters.ifModifiedSince);
        }

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/locales/{locale_id}/downloads/{id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"locale_id"}}`, encodeURIComponent(String(requestParameters.localeId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LocaleDownloadFromJSON(jsonValue));
    }

    /**
     * Show status of already started async locale download. If the download is finished, the download link will be returned.
     * Show status of an async locale download
     */
    async localeDownloadShow(requestParameters: LocaleDownloadShowRequest): Promise<LocaleDownload> {
        const response = await this.localeDownloadShowRaw(requestParameters);
        return await response.value();
    }

}
