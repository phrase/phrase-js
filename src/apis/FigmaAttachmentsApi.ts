/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FigmaAttachment,
    FigmaAttachmentFromJSON,
    FigmaAttachmentToJSON,
    FigmaAttachmentCreateParameters,
    FigmaAttachmentCreateParametersFromJSON,
    FigmaAttachmentCreateParametersToJSON,
    FigmaAttachmentUpdateParameters,
    FigmaAttachmentUpdateParametersFromJSON,
    FigmaAttachmentUpdateParametersToJSON,
} from '../models';

export interface FigmaAttachmentCreateRequest {
    projectId: string;
    figmaAttachmentCreateParameters: FigmaAttachmentCreateParameters;
    xPhraseAppOTP?: string;
    branch?: string;
}

export interface FigmaAttachmentDeleteRequest {
    projectId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
}

export interface FigmaAttachmentShowRequest {
    projectId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
}

export interface FigmaAttachmentUpdateRequest {
    projectId: string;
    id: string;
    figmaAttachmentUpdateParameters: FigmaAttachmentUpdateParameters;
    xPhraseAppOTP?: string;
    branch?: string;
}

export interface FigmaAttachmentsListRequest {
    projectId: string;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
    branch?: string;
}

/**
 * 
 */
export class FigmaAttachmentsApi extends runtime.BaseAPI {

    /**
     * Create a new Figma attachment.
     * Create a Figma attachment
     */
    async figmaAttachmentCreateRaw(requestParameters: FigmaAttachmentCreateRequest): Promise<runtime.ApiResponse<FigmaAttachment>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling figmaAttachmentCreate.');
        }

        if (requestParameters.figmaAttachmentCreateParameters === null || requestParameters.figmaAttachmentCreateParameters === undefined) {
            throw new runtime.RequiredError('figmaAttachmentCreateParameters','Required parameter requestParameters.figmaAttachmentCreateParameters was null or undefined when calling figmaAttachmentCreate.');
        }

        const queryParameters: any = {};

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/figma_attachments`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FigmaAttachmentCreateParametersToJSON(requestParameters.figmaAttachmentCreateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FigmaAttachmentFromJSON(jsonValue));
    }

    /**
     * Create a new Figma attachment.
     * Create a Figma attachment
     */
    async figmaAttachmentCreate(requestParameters: FigmaAttachmentCreateRequest): Promise<FigmaAttachment> {
        const response = await this.figmaAttachmentCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an existing Figma attachment.
     * Delete a Figma attachment
     */
    async figmaAttachmentDeleteRaw(requestParameters: FigmaAttachmentDeleteRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling figmaAttachmentDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling figmaAttachmentDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/figma_attachments/{id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete an existing Figma attachment.
     * Delete a Figma attachment
     */
    async figmaAttachmentDelete(requestParameters: FigmaAttachmentDeleteRequest): Promise<any> {
        const response = await this.figmaAttachmentDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get details on a single Figma attachment for a given project.
     * Get a single Figma attachment
     */
    async figmaAttachmentShowRaw(requestParameters: FigmaAttachmentShowRequest): Promise<runtime.ApiResponse<FigmaAttachment>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling figmaAttachmentShow.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling figmaAttachmentShow.');
        }

        const queryParameters: any = {};

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/figma_attachments/{id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FigmaAttachmentFromJSON(jsonValue));
    }

    /**
     * Get details on a single Figma attachment for a given project.
     * Get a single Figma attachment
     */
    async figmaAttachmentShow(requestParameters: FigmaAttachmentShowRequest): Promise<FigmaAttachment> {
        const response = await this.figmaAttachmentShowRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing Figma attachment.
     * Update a Figma attachment
     */
    async figmaAttachmentUpdateRaw(requestParameters: FigmaAttachmentUpdateRequest): Promise<runtime.ApiResponse<FigmaAttachment>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling figmaAttachmentUpdate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling figmaAttachmentUpdate.');
        }

        if (requestParameters.figmaAttachmentUpdateParameters === null || requestParameters.figmaAttachmentUpdateParameters === undefined) {
            throw new runtime.RequiredError('figmaAttachmentUpdateParameters','Required parameter requestParameters.figmaAttachmentUpdateParameters was null or undefined when calling figmaAttachmentUpdate.');
        }

        const queryParameters: any = {};

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/figma_attachments/{id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: FigmaAttachmentUpdateParametersToJSON(requestParameters.figmaAttachmentUpdateParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FigmaAttachmentFromJSON(jsonValue));
    }

    /**
     * Update an existing Figma attachment.
     * Update a Figma attachment
     */
    async figmaAttachmentUpdate(requestParameters: FigmaAttachmentUpdateRequest): Promise<FigmaAttachment> {
        const response = await this.figmaAttachmentUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all Figma attachments for the given project
     * List Figma attachments
     */
    async figmaAttachmentsListRaw(requestParameters: FigmaAttachmentsListRequest): Promise<runtime.ApiResponse<Array<FigmaAttachment>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling figmaAttachmentsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        if (requestParameters.branch !== undefined) {
            queryParameters['branch'] = requestParameters.branch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/figma_attachments`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FigmaAttachmentFromJSON));
    }

    /**
     * List all Figma attachments for the given project
     * List Figma attachments
     */
    async figmaAttachmentsList(requestParameters: FigmaAttachmentsListRequest): Promise<Array<FigmaAttachment>> {
        const response = await this.figmaAttachmentsListRaw(requestParameters);
        return await response.value();
    }

}
