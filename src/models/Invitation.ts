/* tslint:disable */
/* eslint-disable */
/**
 * Phrase API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LocalePreview,
    LocalePreviewFromJSON,
    LocalePreviewFromJSONTyped,
    LocalePreviewToJSON,
    MemberProjectDetailProjectRoles,
    MemberProjectDetailProjectRolesFromJSON,
    MemberProjectDetailProjectRolesFromJSONTyped,
    MemberProjectDetailProjectRolesToJSON,
    ProjectShort,
    ProjectShortFromJSON,
    ProjectShortFromJSONTyped,
    ProjectShortToJSON,
    Space,
    SpaceFromJSON,
    SpaceFromJSONTyped,
    SpaceToJSON,
    TeamShort,
    TeamShortFromJSON,
    TeamShortFromJSONTyped,
    TeamShortToJSON,
} from './';

/**
 * 
 * @export
 * @interface Invitation
 */
export interface Invitation {
    /**
     * 
     * @type {string}
     * @memberof Invitation
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Invitation
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Invitation
     */
    role?: string;
    /**
     * 
     * @type {string}
     * @memberof Invitation
     */
    state?: string;
    /**
     * 
     * @type {Array<ProjectShort>}
     * @memberof Invitation
     */
    projects?: Array<ProjectShort>;
    /**
     * 
     * @type {Array<LocalePreview>}
     * @memberof Invitation
     */
    locales?: Array<LocalePreview>;
    /**
     * 
     * @type {Array<TeamShort>}
     * @memberof Invitation
     */
    teams?: Array<TeamShort>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Invitation
     */
    defaultLocaleCodes?: Array<string>;
    /**
     * 
     * @type {object}
     * @memberof Invitation
     */
    permissions?: object;
    /**
     * 
     * @type {Array<string>}
     * @memberof Invitation
     */
    localeIds?: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof Invitation
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Invitation
     */
    updatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Invitation
     */
    acceptedAt?: Date;
    /**
     * 
     * @type {Array<Space>}
     * @memberof Invitation
     */
    spaces?: Array<Space>;
    /**
     * 
     * @type {Array<MemberProjectDetailProjectRoles>}
     * @memberof Invitation
     */
    projectRole?: Array<MemberProjectDetailProjectRoles>;
}

export function InvitationFromJSON(json: any): Invitation {
    return InvitationFromJSONTyped(json, false);
}

export function InvitationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Invitation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'role': !exists(json, 'role') ? undefined : json['role'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'projects': !exists(json, 'projects') ? undefined : ((json['projects'] as Array<any>).map(ProjectShortFromJSON)),
        'locales': !exists(json, 'locales') ? undefined : ((json['locales'] as Array<any>).map(LocalePreviewFromJSON)),
        'teams': !exists(json, 'teams') ? undefined : ((json['teams'] as Array<any>).map(TeamShortFromJSON)),
        'defaultLocaleCodes': !exists(json, 'default_locale_codes') ? undefined : json['default_locale_codes'],
        'permissions': !exists(json, 'permissions') ? undefined : json['permissions'],
        'localeIds': !exists(json, 'locale_ids') ? undefined : json['locale_ids'],
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
        'acceptedAt': !exists(json, 'accepted_at') ? undefined : (new Date(json['accepted_at'])),
        'spaces': !exists(json, 'spaces') ? undefined : ((json['spaces'] as Array<any>).map(SpaceFromJSON)),
        'projectRole': !exists(json, 'project_role') ? undefined : ((json['project_role'] as Array<any>).map(MemberProjectDetailProjectRolesFromJSON)),
    };
}

export function InvitationToJSON(value?: Invitation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'email': value.email,
        'role': value.role,
        'state': value.state,
        'projects': value.projects === undefined ? undefined : ((value.projects as Array<any>).map(ProjectShortToJSON)),
        'locales': value.locales === undefined ? undefined : ((value.locales as Array<any>).map(LocalePreviewToJSON)),
        'teams': value.teams === undefined ? undefined : ((value.teams as Array<any>).map(TeamShortToJSON)),
        'default_locale_codes': value.defaultLocaleCodes,
        'permissions': value.permissions,
        'locale_ids': value.localeIds,
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updated_at': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'accepted_at': value.acceptedAt === undefined ? undefined : (value.acceptedAt.toISOString()),
        'spaces': value.spaces === undefined ? undefined : ((value.spaces as Array<any>).map(SpaceToJSON)),
        'project_role': value.projectRole === undefined ? undefined : ((value.projectRole as Array<any>).map(MemberProjectDetailProjectRolesToJSON)),
    };
}


