/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MemberSpaces,
    MemberSpacesFromJSON,
    MemberSpacesFromJSONTyped,
    MemberSpacesToJSON,
    ProjectLocales,
    ProjectLocalesFromJSON,
    ProjectLocalesFromJSONTyped,
    ProjectLocalesToJSON,
    TeamShort,
    TeamShortFromJSON,
    TeamShortFromJSONTyped,
    TeamShortToJSON,
} from './';

/**
 * 
 * @export
 * @interface Member
 */
export interface Member {
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    username?: string;
    /**
     * 
     * @type {Date}
     * @memberof Member
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Member
     */
    lastActivityAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    role?: string;
    /**
     * 
     * @type {Array<ProjectLocales>}
     * @memberof Member
     */
    projects?: Array<ProjectLocales>;
    /**
     * 
     * @type {object}
     * @memberof Member
     */
    permissions?: object;
    /**
     * 
     * @type {Array<string>}
     * @memberof Member
     */
    defaultLocaleCodes?: Array<string>;
    /**
     * 
     * @type {Array<TeamShort>}
     * @memberof Member
     */
    teams?: Array<TeamShort>;
    /**
     * 
     * @type {Array<MemberSpaces>}
     * @memberof Member
     */
    spaces?: Array<MemberSpaces>;
}

export function MemberFromJSON(json: any): Member {
    return MemberFromJSONTyped(json, false);
}

export function MemberFromJSONTyped(json: any, ignoreDiscriminator: boolean): Member {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'username': !exists(json, 'username') ? undefined : json['username'],
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'lastActivityAt': !exists(json, 'last_activity_at') ? undefined : (new Date(json['last_activity_at'])),
        'role': !exists(json, 'role') ? undefined : json['role'],
        'projects': !exists(json, 'projects') ? undefined : ((json['projects'] as Array<any>).map(ProjectLocalesFromJSON)),
        'permissions': !exists(json, 'permissions') ? undefined : json['permissions'],
        'defaultLocaleCodes': !exists(json, 'default_locale_codes') ? undefined : json['default_locale_codes'],
        'teams': !exists(json, 'teams') ? undefined : ((json['teams'] as Array<any>).map(TeamShortFromJSON)),
        'spaces': !exists(json, 'spaces') ? undefined : ((json['spaces'] as Array<any>).map(MemberSpacesFromJSON)),
    };
}

export function MemberToJSON(value?: Member | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'email': value.email,
        'username': value.username,
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'last_activity_at': value.lastActivityAt === undefined ? undefined : (value.lastActivityAt.toISOString()),
        'role': value.role,
        'projects': value.projects === undefined ? undefined : ((value.projects as Array<any>).map(ProjectLocalesToJSON)),
        'permissions': value.permissions,
        'default_locale_codes': value.defaultLocaleCodes,
        'teams': value.teams === undefined ? undefined : ((value.teams as Array<any>).map(TeamShortToJSON)),
        'spaces': value.spaces === undefined ? undefined : ((value.spaces as Array<any>).map(MemberSpacesToJSON)),
    };
}


