/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    JobPreview,
    JobPreviewFromJSON,
    JobPreviewFromJSONTyped,
    JobPreviewToJSON,
    LocalePreview,
    LocalePreviewFromJSON,
    LocalePreviewFromJSONTyped,
    LocalePreviewToJSON,
    LocaleTeamPreview,
    LocaleTeamPreviewFromJSON,
    LocaleTeamPreviewFromJSONTyped,
    LocaleTeamPreviewToJSON,
    LocaleUserPreview,
    LocaleUserPreviewFromJSON,
    LocaleUserPreviewFromJSONTyped,
    LocaleUserPreviewToJSON,
} from './';

/**
 * 
 * @export
 * @interface JobLocale
 */
export interface JobLocale {
    /**
     * 
     * @type {string}
     * @memberof JobLocale
     */
    id?: string;
    /**
     * 
     * @type {JobPreview}
     * @memberof JobLocale
     */
    job?: JobPreview;
    /**
     * 
     * @type {LocalePreview}
     * @memberof JobLocale
     */
    locale?: LocalePreview;
    /**
     * 
     * @type {Array<LocaleUserPreview>}
     * @memberof JobLocale
     */
    users?: Array<LocaleUserPreview>;
    /**
     * 
     * @type {Array<LocaleTeamPreview>}
     * @memberof JobLocale
     */
    teams?: Array<LocaleTeamPreview>;
    /**
     * 
     * @type {boolean}
     * @memberof JobLocale
     */
    completed?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof JobLocale
     */
    translationCompletedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof JobLocale
     */
    reviewCompletedAt?: Date;
}

export function JobLocaleFromJSON(json: any): JobLocale {
    return JobLocaleFromJSONTyped(json, false);
}

export function JobLocaleFromJSONTyped(json: any, ignoreDiscriminator: boolean): JobLocale {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'job': !exists(json, 'job') ? undefined : JobPreviewFromJSON(json['job']),
        'locale': !exists(json, 'locale') ? undefined : LocalePreviewFromJSON(json['locale']),
        'users': !exists(json, 'users') ? undefined : ((json['users'] as Array<any>).map(LocaleUserPreviewFromJSON)),
        'teams': !exists(json, 'teams') ? undefined : ((json['teams'] as Array<any>).map(LocaleTeamPreviewFromJSON)),
        'completed': !exists(json, 'completed') ? undefined : json['completed'],
        'translationCompletedAt': !exists(json, 'translation_completed_at') ? undefined : (new Date(json['translation_completed_at'])),
        'reviewCompletedAt': !exists(json, 'review_completed_at') ? undefined : (new Date(json['review_completed_at'])),
    };
}

export function JobLocaleToJSON(value?: JobLocale | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'job': JobPreviewToJSON(value.job),
        'locale': LocalePreviewToJSON(value.locale),
        'users': value.users === undefined ? undefined : ((value.users as Array<any>).map(LocaleUserPreviewToJSON)),
        'teams': value.teams === undefined ? undefined : ((value.teams as Array<any>).map(LocaleTeamPreviewToJSON)),
        'completed': value.completed,
        'translation_completed_at': value.translationCompletedAt === undefined ? undefined : (value.translationCompletedAt.toISOString()),
        'review_completed_at': value.reviewCompletedAt === undefined ? undefined : (value.reviewCompletedAt.toISOString()),
    };
}


