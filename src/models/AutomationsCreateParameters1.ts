/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AutomationsCreateParameters1
 */
export interface AutomationsCreateParameters1 {
    /**
     * name of the automation
     * @type {string}
     * @memberof AutomationsCreateParameters1
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AutomationsCreateParameters1
     */
    trigger: AutomationsCreateParameters1TriggerEnum;
    /**
     * List of project IDs to associate with the automation. Currently, only the first ID in the array is used. The array format leaves room for future support of multiple projects. 
     * @type {Array<string>}
     * @memberof AutomationsCreateParameters1
     */
    projectIds: Array<string>;
    /**
     * id of job template that the automation uses to create jobs from
     * @type {string}
     * @memberof AutomationsCreateParameters1
     */
    jobTemplateId?: string;
    /**
     * translation key statuses used to filter keys that are added to jobs
     * @type {Array<string>}
     * @memberof AutomationsCreateParameters1
     */
    statusFilters: Array<AutomationsCreateParameters1StatusFiltersEnum>;
    /**
     * used to filter which keys are added to jobs
     * @type {Array<string>}
     * @memberof AutomationsCreateParameters1
     */
    tags?: Array<string>;
    /**
     * along with time_zone, specifies when the scheduled automation is supposed to run
     * @type {string}
     * @memberof AutomationsCreateParameters1
     */
    cronSchedule?: string;
    /**
     * along with cron_schedule, specifies when the scheduled automation is supposed to run
     * @type {string}
     * @memberof AutomationsCreateParameters1
     */
    timeZone?: string;
}

export function AutomationsCreateParameters1FromJSON(json: any): AutomationsCreateParameters1 {
    return AutomationsCreateParameters1FromJSONTyped(json, false);
}

export function AutomationsCreateParameters1FromJSONTyped(json: any, ignoreDiscriminator: boolean): AutomationsCreateParameters1 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'trigger': json['trigger'],
        'projectIds': json['project_ids'],
        'jobTemplateId': !exists(json, 'job_template_id') ? undefined : json['job_template_id'],
        'statusFilters': json['status_filters'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'cronSchedule': !exists(json, 'cron_schedule') ? undefined : json['cron_schedule'],
        'timeZone': !exists(json, 'time_zone') ? undefined : json['time_zone'],
    };
}

export function AutomationsCreateParameters1ToJSON(value?: AutomationsCreateParameters1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'trigger': value.trigger,
        'project_ids': value.projectIds,
        'job_template_id': value.jobTemplateId,
        'status_filters': value.statusFilters,
        'tags': value.tags,
        'cron_schedule': value.cronSchedule,
        'time_zone': value.timeZone,
    };
}

/**
* @export
* @enum {string}
*/
export enum AutomationsCreateParameters1TriggerEnum {
    Schedule = 'schedule',
    Upload = 'upload'
}
/**
* @export
* @enum {string}
*/
export enum AutomationsCreateParameters1StatusFiltersEnum {
    Unverified = 'unverified',
    Untranslated = 'untranslated',
    ReadyForReview = 'ready_for_review'
}


