/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LocaleDownloadCreateParameters
 */
export interface LocaleDownloadCreateParameters {
    /**
     * File format name. See the [format guide](https://support.phrase.com/hc/en-us/sections/6111343326364) for all supported file formats.
     * @type {string}
     * @memberof LocaleDownloadCreateParameters
     */
    fileFormat: string;
    /**
     * specify the branch to use
     * @type {string}
     * @memberof LocaleDownloadCreateParameters
     */
    branch?: string;
    /**
     * Limit results to keys tagged with a list of comma separated tag names.
     * @type {string}
     * @memberof LocaleDownloadCreateParameters
     */
    tags?: string;
    /**
     * Indicates whether keys without translations should be included in the output as well.
     * @type {boolean}
     * @memberof LocaleDownloadCreateParameters
     */
    includeEmptyTranslations?: boolean;
    /**
     * Indicates whether zero forms should be included when empty in pluralized keys.
     * @type {boolean}
     * @memberof LocaleDownloadCreateParameters
     */
    excludeEmptyZeroForms?: boolean;
    /**
     * Include translated keys in the locale file. Use in combination with include_empty_translations to obtain only untranslated keys.
     * @type {boolean}
     * @memberof LocaleDownloadCreateParameters
     */
    includeTranslatedKeys?: boolean;
    /**
     * Indicates whether [NOTRANSLATE] tags should be kept.
     * @type {boolean}
     * @memberof LocaleDownloadCreateParameters
     */
    keepNotranslateTags?: boolean;
    /**
     * Additional formatting and render options. See the [format guide](https://support.phrase.com/hc/en-us/sections/6111343326364) for a list of options available for each format. Specify format options like this: `...&format_options[foo]=bar`
     * @type {object}
     * @memberof LocaleDownloadCreateParameters
     */
    formatOptions?: object;
    /**
     * Enforces a specific encoding on the file contents. Valid options are \"UTF-8\", \"UTF-16\" and \"ISO-8859-1\".
     * @type {string}
     * @memberof LocaleDownloadCreateParameters
     */
    encoding?: string;
    /**
     * if set to false unverified translations are excluded
     * @type {boolean}
     * @memberof LocaleDownloadCreateParameters
     */
    includeUnverifiedTranslations?: boolean;
    /**
     * If set to true the last reviewed version of a translation is used. This is only available if the review workflow is enabled for the project.
     * @type {boolean}
     * @memberof LocaleDownloadCreateParameters
     */
    useLastReviewedVersion?: boolean;
    /**
     * Locale IDs or locale names
     * @type {Array<string>}
     * @memberof LocaleDownloadCreateParameters
     */
    localeIds?: Array<string>;
    /**
     * If a key has no translation in the locale being downloaded the translation in the fallback locale will be used. Provide the ID of the locale that should be used as the fallback. Requires include_empty_translations to be set to `true`.
     * @type {string}
     * @memberof LocaleDownloadCreateParameters
     */
    fallbackLocaleId?: string;
    /**
     * Provides the source language of a corresponding job as the source language of the generated locale file. This parameter will be ignored unless used in combination with a `tag` parameter indicating a specific job.
     * @type {string}
     * @memberof LocaleDownloadCreateParameters
     */
    sourceLocaleId?: string;
    /**
     * Custom metadata filters. Provide the name of the metadata field and the value to filter by. Only keys with matching metadata will be included in the download. 
     * @type {object}
     * @memberof LocaleDownloadCreateParameters
     */
    customMetadataFilters?: object;
    /**
     * Only include translations and keys that have been updated since the given date. The date must be in ISO 8601 format (e.g., `2023-01-01T00:00:00Z`). 
     * @type {string}
     * @memberof LocaleDownloadCreateParameters
     */
    updatedSince?: string;
}

export function LocaleDownloadCreateParametersFromJSON(json: any): LocaleDownloadCreateParameters {
    return LocaleDownloadCreateParametersFromJSONTyped(json, false);
}

export function LocaleDownloadCreateParametersFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocaleDownloadCreateParameters {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fileFormat': json['file_format'],
        'branch': !exists(json, 'branch') ? undefined : json['branch'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'includeEmptyTranslations': !exists(json, 'include_empty_translations') ? undefined : json['include_empty_translations'],
        'excludeEmptyZeroForms': !exists(json, 'exclude_empty_zero_forms') ? undefined : json['exclude_empty_zero_forms'],
        'includeTranslatedKeys': !exists(json, 'include_translated_keys') ? undefined : json['include_translated_keys'],
        'keepNotranslateTags': !exists(json, 'keep_notranslate_tags') ? undefined : json['keep_notranslate_tags'],
        'formatOptions': !exists(json, 'format_options') ? undefined : json['format_options'],
        'encoding': !exists(json, 'encoding') ? undefined : json['encoding'],
        'includeUnverifiedTranslations': !exists(json, 'include_unverified_translations') ? undefined : json['include_unverified_translations'],
        'useLastReviewedVersion': !exists(json, 'use_last_reviewed_version') ? undefined : json['use_last_reviewed_version'],
        'localeIds': !exists(json, 'locale_ids') ? undefined : json['locale_ids'],
        'fallbackLocaleId': !exists(json, 'fallback_locale_id') ? undefined : json['fallback_locale_id'],
        'sourceLocaleId': !exists(json, 'source_locale_id') ? undefined : json['source_locale_id'],
        'customMetadataFilters': !exists(json, 'custom_metadata_filters') ? undefined : json['custom_metadata_filters'],
        'updatedSince': !exists(json, 'updated_since') ? undefined : json['updated_since'],
    };
}

export function LocaleDownloadCreateParametersToJSON(value?: LocaleDownloadCreateParameters | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'file_format': value.fileFormat,
        'branch': value.branch,
        'tags': value.tags,
        'include_empty_translations': value.includeEmptyTranslations,
        'exclude_empty_zero_forms': value.excludeEmptyZeroForms,
        'include_translated_keys': value.includeTranslatedKeys,
        'keep_notranslate_tags': value.keepNotranslateTags,
        'format_options': value.formatOptions,
        'encoding': value.encoding,
        'include_unverified_translations': value.includeUnverifiedTranslations,
        'use_last_reviewed_version': value.useLastReviewedVersion,
        'locale_ids': value.localeIds,
        'fallback_locale_id': value.fallbackLocaleId,
        'source_locale_id': value.sourceLocaleId,
        'custom_metadata_filters': value.customMetadataFilters,
        'updated_since': value.updatedSince,
    };
}


