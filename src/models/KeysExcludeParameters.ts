/* tslint:disable */
/* eslint-disable */
/**
 * Phrase API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface KeysExcludeParameters
 */
export interface KeysExcludeParameters {
    /**
     * specify the branch to use
     * @type {string}
     * @memberof KeysExcludeParameters
     */
    branch?: string;
    /**
     * Specify a query to do broad search for keys by name (including wildcards).<br><br> The following qualifiers are also supported in the search term:<br> <ul>   <li><code>ids:key_id,...</code> for queries on a comma-separated list of ids</li>   <li><code>name:key_name</code> for text queries on exact key names - spaces, commas, and colons  need to be escaped with double backslashes</li>   <li><code>tags:tag_name</code> to filter for keys with certain tags</li>   <li><code>translated:{true|false}</code> for translation status (also requires <code>locale_id</code> to be specified)</li>   <li><code>updated_at:{>=|<=}2013-02-21T00:00:00Z</code> for date range queries</li>   <li><code>unmentioned_in_upload:upload_id</code> to filter keys unmentioned within upload</li> </ul> Find more examples <a href=\"#overview--usage-examples\">here</a>. 
     * @type {string}
     * @memberof KeysExcludeParameters
     */
    q?: string;
    /**
     * Locale used to exlcude or include keys.
     * @type {string}
     * @memberof KeysExcludeParameters
     */
    targetLocaleId?: string;
    /**
     * Tag or comma-separated list of tags to add to the matching collection of keys
     * @type {string}
     * @memberof KeysExcludeParameters
     */
    tags?: string;
}

export function KeysExcludeParametersFromJSON(json: any): KeysExcludeParameters {
    return KeysExcludeParametersFromJSONTyped(json, false);
}

export function KeysExcludeParametersFromJSONTyped(json: any, ignoreDiscriminator: boolean): KeysExcludeParameters {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'branch': !exists(json, 'branch') ? undefined : json['branch'],
        'q': !exists(json, 'q') ? undefined : json['q'],
        'targetLocaleId': !exists(json, 'target_locale_id') ? undefined : json['target_locale_id'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
    };
}

export function KeysExcludeParametersToJSON(value?: KeysExcludeParameters | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'branch': value.branch,
        'q': value.q,
        'target_locale_id': value.targetLocaleId,
        'tags': value.tags,
    };
}


