/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Account,
    AccountFromJSON,
    AccountFromJSONTyped,
    AccountToJSON,
} from './';

/**
 * 
 * @export
 * @interface Automation
 */
export interface Automation {
    /**
     * 
     * @type {string}
     * @memberof Automation
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Automation
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Automation
     */
    status?: AutomationStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Automation
     */
    trigger?: AutomationTriggerEnum;
    /**
     * translation key statuses used to filter keys that are added to jobs
     * @type {Array<string>}
     * @memberof Automation
     */
    statusFilters?: Array<AutomationStatusFiltersEnum>;
    /**
     * 
     * @type {string}
     * @memberof Automation
     */
    projectId?: string;
    /**
     * 
     * @type {string}
     * @memberof Automation
     */
    jobTemplateId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Automation
     */
    tags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Automation
     */
    cronSchedule?: string;
    /**
     * 
     * @type {string}
     * @memberof Automation
     */
    timeZone?: string;
    /**
     * 
     * @type {Account}
     * @memberof Automation
     */
    account?: Account;
    /**
     * 
     * @type {Date}
     * @memberof Automation
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Automation
     */
    updatedAt?: Date;
}

export function AutomationFromJSON(json: any): Automation {
    return AutomationFromJSONTyped(json, false);
}

export function AutomationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Automation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'trigger': !exists(json, 'trigger') ? undefined : json['trigger'],
        'statusFilters': !exists(json, 'status_filters') ? undefined : json['status_filters'],
        'projectId': !exists(json, 'project_id') ? undefined : json['project_id'],
        'jobTemplateId': !exists(json, 'job_template_id') ? undefined : json['job_template_id'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'cronSchedule': !exists(json, 'cron_schedule') ? undefined : json['cron_schedule'],
        'timeZone': !exists(json, 'time_zone') ? undefined : json['time_zone'],
        'account': !exists(json, 'account') ? undefined : AccountFromJSON(json['account']),
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
    };
}

export function AutomationToJSON(value?: Automation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'status': value.status,
        'trigger': value.trigger,
        'status_filters': value.statusFilters,
        'project_id': value.projectId,
        'job_template_id': value.jobTemplateId,
        'tags': value.tags,
        'cron_schedule': value.cronSchedule,
        'time_zone': value.timeZone,
        'account': AccountToJSON(value.account),
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updated_at': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

/**
* @export
* @enum {string}
*/
export enum AutomationStatusEnum {
    Inactive = 'inactive',
    Active = 'active',
    Error = 'error'
}
/**
* @export
* @enum {string}
*/
export enum AutomationTriggerEnum {
    Schedule = 'schedule',
    Upload = 'upload'
}
/**
* @export
* @enum {string}
*/
export enum AutomationStatusFiltersEnum {
    Unverified = 'unverified',
    Untranslated = 'untranslated',
    ReadyForReview = 'ready_for_review'
}


