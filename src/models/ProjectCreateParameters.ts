/* tslint:disable */
/* eslint-disable */
/**
 * Phrase API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProjectCreateParameters
 */
export interface ProjectCreateParameters {
    /**
     * Name of the project
     * @type {string}
     * @memberof ProjectCreateParameters
     */
    name?: string;
    /**
     * Main file format specified by its API Extension name. Used for locale downloads if no format is specified. For API Extension names of available file formats see <a href=\"https://help.phrase.com/help/supported-platforms-and-formats\">Format Guide</a> or our <a href=\"#formats\">Formats API Endpoint</a>.
     * @type {string}
     * @memberof ProjectCreateParameters
     */
    mainFormat?: string;
    /**
     * Indicates whether the project should share the account\'s translation memory
     * @type {boolean}
     * @memberof ProjectCreateParameters
     */
    sharesTranslationMemory?: boolean;
    /**
     * Image to identify the project
     * @type {Blob}
     * @memberof ProjectCreateParameters
     */
    projectImage?: Blob;
    /**
     * Indicates whether the project image should be deleted.
     * @type {boolean}
     * @memberof ProjectCreateParameters
     */
    removeProjectImage?: boolean;
    /**
     * Account ID to specify the actual account the project should be created in. Required if the requesting user is a member of multiple accounts.
     * @type {string}
     * @memberof ProjectCreateParameters
     */
    accountId?: string;
    /**
     * When a source project ID is given, a clone of that project will be created, including all locales, keys and translations as well as the main project settings if they are not defined otherwise through the params.
     * @type {string}
     * @memberof ProjectCreateParameters
     */
    sourceProjectId?: string;
}

export function ProjectCreateParametersFromJSON(json: any): ProjectCreateParameters {
    return ProjectCreateParametersFromJSONTyped(json, false);
}

export function ProjectCreateParametersFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectCreateParameters {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'mainFormat': !exists(json, 'main_format') ? undefined : json['main_format'],
        'sharesTranslationMemory': !exists(json, 'shares_translation_memory') ? undefined : json['shares_translation_memory'],
        'projectImage': !exists(json, 'project_image') ? undefined : json['project_image'],
        'removeProjectImage': !exists(json, 'remove_project_image') ? undefined : json['remove_project_image'],
        'accountId': !exists(json, 'account_id') ? undefined : json['account_id'],
        'sourceProjectId': !exists(json, 'source_project_id') ? undefined : json['source_project_id'],
    };
}

export function ProjectCreateParametersToJSON(value?: ProjectCreateParameters | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'main_format': value.mainFormat,
        'shares_translation_memory': value.sharesTranslationMemory,
        'project_image': value.projectImage,
        'remove_project_image': value.removeProjectImage,
        'account_id': value.accountId,
        'source_project_id': value.sourceProjectId,
    };
}


