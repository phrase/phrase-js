/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LocalePreview,
    LocalePreviewFromJSON,
    LocalePreviewFromJSONTyped,
    LocalePreviewToJSON,
} from './';

/**
 * 
 * @export
 * @interface ReleaseTrigger
 */
export interface ReleaseTrigger {
    /**
     * 
     * @type {string}
     * @memberof ReleaseTrigger
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ReleaseTrigger
     */
    branch?: string;
    /**
     * Cron schedule for the scheduler. Read more about the format of this field at https://en.wikipedia.org/wiki/Cron
     * @type {string}
     * @memberof ReleaseTrigger
     */
    cronSchedule?: string;
    /**
     * Time zone for the scheduler
     * @type {string}
     * @memberof ReleaseTrigger
     */
    timeZone?: string;
    /**
     * The next time a release will be created for this trigger
     * @type {Date}
     * @memberof ReleaseTrigger
     */
    nextRunAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof ReleaseTrigger
     */
    appMinVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof ReleaseTrigger
     */
    appMaxVersion?: string;
    /**
     * 
     * @type {Array<LocalePreview>}
     * @memberof ReleaseTrigger
     */
    locales?: Array<LocalePreview>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ReleaseTrigger
     */
    tags?: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof ReleaseTrigger
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ReleaseTrigger
     */
    updatedAt?: Date;
}

export function ReleaseTriggerFromJSON(json: any): ReleaseTrigger {
    return ReleaseTriggerFromJSONTyped(json, false);
}

export function ReleaseTriggerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReleaseTrigger {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'branch': !exists(json, 'branch') ? undefined : json['branch'],
        'cronSchedule': !exists(json, 'cron_schedule') ? undefined : json['cron_schedule'],
        'timeZone': !exists(json, 'time_zone') ? undefined : json['time_zone'],
        'nextRunAt': !exists(json, 'next_run_at') ? undefined : (new Date(json['next_run_at'])),
        'appMinVersion': !exists(json, 'app_min_version') ? undefined : json['app_min_version'],
        'appMaxVersion': !exists(json, 'app_max_version') ? undefined : json['app_max_version'],
        'locales': !exists(json, 'locales') ? undefined : ((json['locales'] as Array<any>).map(LocalePreviewFromJSON)),
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
    };
}

export function ReleaseTriggerToJSON(value?: ReleaseTrigger | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'branch': value.branch,
        'cron_schedule': value.cronSchedule,
        'time_zone': value.timeZone,
        'next_run_at': value.nextRunAt === undefined ? undefined : (value.nextRunAt.toISOString()),
        'app_min_version': value.appMinVersion,
        'app_max_version': value.appMaxVersion,
        'locales': value.locales === undefined ? undefined : ((value.locales as Array<any>).map(LocalePreviewToJSON)),
        'tags': value.tags,
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updated_at': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}


