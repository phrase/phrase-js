/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Account,
    AccountFromJSON,
    AccountFromJSONTyped,
    AccountToJSON,
    Locale,
    LocaleFromJSON,
    LocaleFromJSONTyped,
    LocaleToJSON,
    NotificationGroup,
    NotificationGroupFromJSON,
    NotificationGroupFromJSONTyped,
    NotificationGroupToJSON,
    Project,
    ProjectFromJSON,
    ProjectFromJSONTyped,
    ProjectToJSON,
    UserPreview,
    UserPreviewFromJSON,
    UserPreviewFromJSONTyped,
    UserPreviewToJSON,
} from './';

/**
 * 
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    eventName?: string;
    /**
     * 
     * @type {Date}
     * @memberof Notification
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Notification
     */
    updatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Notification
     */
    deliveredAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Notification
     */
    seenAt?: Date;
    /**
     * 
     * @type {object}
     * @memberof Notification
     */
    data?: object;
    /**
     * 
     * @type {object}
     * @memberof Notification
     */
    resource?: object;
    /**
     * 
     * @type {Locale}
     * @memberof Notification
     */
    locale?: Locale;
    /**
     * 
     * @type {UserPreview}
     * @memberof Notification
     */
    user?: UserPreview;
    /**
     * 
     * @type {Project}
     * @memberof Notification
     */
    project?: Project;
    /**
     * 
     * @type {Account}
     * @memberof Notification
     */
    account?: Account;
    /**
     * 
     * @type {NotificationGroup}
     * @memberof Notification
     */
    group?: NotificationGroup;
}

export function NotificationFromJSON(json: any): Notification {
    return NotificationFromJSONTyped(json, false);
}

export function NotificationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Notification {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'eventName': !exists(json, 'event_name') ? undefined : json['event_name'],
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
        'deliveredAt': !exists(json, 'delivered_at') ? undefined : (new Date(json['delivered_at'])),
        'seenAt': !exists(json, 'seen_at') ? undefined : (new Date(json['seen_at'])),
        'data': !exists(json, 'data') ? undefined : json['data'],
        'resource': !exists(json, 'resource') ? undefined : json['resource'],
        'locale': !exists(json, 'locale') ? undefined : LocaleFromJSON(json['locale']),
        'user': !exists(json, 'user') ? undefined : UserPreviewFromJSON(json['user']),
        'project': !exists(json, 'project') ? undefined : ProjectFromJSON(json['project']),
        'account': !exists(json, 'account') ? undefined : AccountFromJSON(json['account']),
        'group': !exists(json, 'group') ? undefined : NotificationGroupFromJSON(json['group']),
    };
}

export function NotificationToJSON(value?: Notification | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'event_name': value.eventName,
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updated_at': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'delivered_at': value.deliveredAt === undefined ? undefined : (value.deliveredAt.toISOString()),
        'seen_at': value.seenAt === undefined ? undefined : (value.seenAt.toISOString()),
        'data': value.data,
        'resource': value.resource,
        'locale': LocaleToJSON(value.locale),
        'user': UserPreviewToJSON(value.user),
        'project': ProjectToJSON(value.project),
        'account': AccountToJSON(value.account),
        'group': NotificationGroupToJSON(value.group),
    };
}


