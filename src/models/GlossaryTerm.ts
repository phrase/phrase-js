/* tslint:disable */
/* eslint-disable */
/**
 * Phrase API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    GlossaryTermTranslation,
    GlossaryTermTranslationFromJSON,
    GlossaryTermTranslationFromJSONTyped,
    GlossaryTermTranslationToJSON,
} from './';

/**
 * 
 * @export
 * @interface GlossaryTerm
 */
export interface GlossaryTerm {
    /**
     * 
     * @type {string}
     * @memberof GlossaryTerm
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof GlossaryTerm
     */
    term?: string;
    /**
     * 
     * @type {string}
     * @memberof GlossaryTerm
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GlossaryTerm
     */
    translatable?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GlossaryTerm
     */
    caseSensitive?: boolean;
    /**
     * 
     * @type {Array<GlossaryTermTranslation>}
     * @memberof GlossaryTerm
     */
    translations?: Array<GlossaryTermTranslation>;
    /**
     * 
     * @type {Date}
     * @memberof GlossaryTerm
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof GlossaryTerm
     */
    updatedAt?: Date;
}

export function GlossaryTermFromJSON(json: any): GlossaryTerm {
    return GlossaryTermFromJSONTyped(json, false);
}

export function GlossaryTermFromJSONTyped(json: any, ignoreDiscriminator: boolean): GlossaryTerm {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'term': !exists(json, 'term') ? undefined : json['term'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'translatable': !exists(json, 'translatable') ? undefined : json['translatable'],
        'caseSensitive': !exists(json, 'case_sensitive') ? undefined : json['case_sensitive'],
        'translations': !exists(json, 'translations') ? undefined : ((json['translations'] as Array<any>).map(GlossaryTermTranslationFromJSON)),
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
    };
}

export function GlossaryTermToJSON(value?: GlossaryTerm | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'term': value.term,
        'description': value.description,
        'translatable': value.translatable,
        'case_sensitive': value.caseSensitive,
        'translations': value.translations === undefined ? undefined : ((value.translations as Array<any>).map(GlossaryTermTranslationToJSON)),
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updated_at': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}


