/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LocaleDownloadParams,
    LocaleDownloadParamsFromJSON,
    LocaleDownloadParamsFromJSONTyped,
    LocaleDownloadParamsToJSON,
    LocaleDownloadResult,
    LocaleDownloadResultFromJSON,
    LocaleDownloadResultFromJSONTyped,
    LocaleDownloadResultToJSON,
} from './';

/**
 * 
 * @export
 * @interface LocaleDownload
 */
export interface LocaleDownload {
    /**
     * 
     * @type {string}
     * @memberof LocaleDownload
     */
    id?: string;
    /**
     * The status of the download request. Possible values are `processing`, `completed`, and `error`. 
     * @type {string}
     * @memberof LocaleDownload
     */
    status?: LocaleDownloadStatusEnum;
    /**
     * 
     * @type {LocaleDownloadResult}
     * @memberof LocaleDownload
     */
    result?: LocaleDownloadResult;
    /**
     * 
     * @type {LocaleDownloadParams}
     * @memberof LocaleDownload
     */
    params?: LocaleDownloadParams;
    /**
     * 
     * @type {string}
     * @memberof LocaleDownload
     */
    error?: string;
    /**
     * 
     * @type {Date}
     * @memberof LocaleDownload
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof LocaleDownload
     */
    completedAt?: Date;
}

export function LocaleDownloadFromJSON(json: any): LocaleDownload {
    return LocaleDownloadFromJSONTyped(json, false);
}

export function LocaleDownloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocaleDownload {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'result': !exists(json, 'result') ? undefined : LocaleDownloadResultFromJSON(json['result']),
        'params': !exists(json, 'params') ? undefined : LocaleDownloadParamsFromJSON(json['params']),
        'error': !exists(json, 'error') ? undefined : json['error'],
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'completedAt': !exists(json, 'completed_at') ? undefined : (new Date(json['completed_at'])),
    };
}

export function LocaleDownloadToJSON(value?: LocaleDownload | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'status': value.status,
        'result': LocaleDownloadResultToJSON(value.result),
        'params': LocaleDownloadParamsToJSON(value.params),
        'error': value.error,
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'completed_at': value.completedAt === undefined ? undefined : (value.completedAt.toISOString()),
    };
}

/**
* @export
* @enum {string}
*/
export enum LocaleDownloadStatusEnum {
    Processing = 'processing',
    Completed = 'completed',
    Error = 'error'
}


