/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface KeysIncludeParameters
 */
export interface KeysIncludeParameters {
    /**
     * specify the branch to use
     * @type {string}
     * @memberof KeysIncludeParameters
     */
    branch?: string;
    /**
     * Specify a query to do broad search for keys by name (including wildcards).  The following qualifiers are also supported in the search term:  * `ids:key_id,...` for queries on a comma-separated list of ids * `name:key_name` for text queries on exact key names - spaces, commas, and colons need to be escaped with double backslashes * `tags:tag_name` to filter for keys with certain tags * `translated:{true|false}` for translation status (also requires `locale_id` to be specified) * `updated_at:{>=|<=}2013-02-21T00:00:00Z` for date range queries * `unmentioned_in_upload:upload_id,...` to filter keys unmentioned within upload. When multiple upload IDs provided, matches only keys not mentioned in **all** uploads  Find more examples [here](/en/api/strings/usage-examples). 
     * @type {string}
     * @memberof KeysIncludeParameters
     */
    q?: string;
    /**
     * Locale used to exlcude or include keys.
     * @type {string}
     * @memberof KeysIncludeParameters
     */
    targetLocaleId?: string;
    /**
     * Tag or comma-separated list of tags to add to the matching collection of keys
     * @type {string}
     * @memberof KeysIncludeParameters
     */
    tags?: string;
}

export function KeysIncludeParametersFromJSON(json: any): KeysIncludeParameters {
    return KeysIncludeParametersFromJSONTyped(json, false);
}

export function KeysIncludeParametersFromJSONTyped(json: any, ignoreDiscriminator: boolean): KeysIncludeParameters {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'branch': !exists(json, 'branch') ? undefined : json['branch'],
        'q': !exists(json, 'q') ? undefined : json['q'],
        'targetLocaleId': !exists(json, 'target_locale_id') ? undefined : json['target_locale_id'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
    };
}

export function KeysIncludeParametersToJSON(value?: KeysIncludeParameters | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'branch': value.branch,
        'q': value.q,
        'target_locale_id': value.targetLocaleId,
        'tags': value.tags,
    };
}


