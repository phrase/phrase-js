/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OrderCreateParameters
 */
export interface OrderCreateParameters {
    /**
     * specify the branch to use
     * @type {string}
     * @memberof OrderCreateParameters
     */
    branch?: string;
    /**
     * the name of the order, default name is: Translation order from \'current datetime\'
     * @type {string}
     * @memberof OrderCreateParameters
     */
    name: string;
    /**
     * Name of the LSP that should process this order. Can be one of gengo, textmaster.
     * @type {string}
     * @memberof OrderCreateParameters
     */
    lsp: string;
    /**
     * Source locale for the order. Can be the name or id of the source locale. Preferred is id.
     * @type {string}
     * @memberof OrderCreateParameters
     */
    sourceLocaleId?: string;
    /**
     * List of target locales you want the source content translate to. Can be the name or id of the target locales. Preferred is id.
     * @type {Array<string>}
     * @memberof OrderCreateParameters
     */
    targetLocaleIds?: Array<string>;
    /**
     * Name of the quality level, availability depends on the LSP. Can be one of:  standard, pro (for orders processed by Gengo) and one of regular, premium, enterprise (for orders processed by TextMaster)
     * @type {string}
     * @memberof OrderCreateParameters
     */
    translationType?: string;
    /**
     * Tag you want to order translations for.
     * @type {string}
     * @memberof OrderCreateParameters
     */
    tag?: string;
    /**
     * Message that is displayed to the translators for description.
     * @type {string}
     * @memberof OrderCreateParameters
     */
    message?: string;
    /**
     * Style guide for translators to be sent with the order.
     * @type {string}
     * @memberof OrderCreateParameters
     */
    styleguideId?: string;
    /**
     * Unverify translations upon delivery.
     * @type {boolean}
     * @memberof OrderCreateParameters
     */
    unverifyTranslationsUponDelivery?: boolean;
    /**
     * Order translations for keys with untranslated content in the selected target locales.
     * @type {boolean}
     * @memberof OrderCreateParameters
     */
    includeUntranslatedKeys?: boolean;
    /**
     * Order translations for keys with unverified content in the selected target locales.
     * @type {boolean}
     * @memberof OrderCreateParameters
     */
    includeUnverifiedTranslations?: boolean;
    /**
     * Category to use (required for orders processed by TextMaster).
     * @type {string}
     * @memberof OrderCreateParameters
     */
    category?: string;
    /**
     * Extra proofreading option to ensure consistency in vocabulary and style. Only available for orders processed by TextMaster.
     * @type {boolean}
     * @memberof OrderCreateParameters
     */
    quality?: boolean;
    /**
     * Indicates whether the priority option should be ordered which decreases turnaround time by 30%. Available only for orders processed by TextMaster.
     * @type {boolean}
     * @memberof OrderCreateParameters
     */
    priority?: boolean;
}

export function OrderCreateParametersFromJSON(json: any): OrderCreateParameters {
    return OrderCreateParametersFromJSONTyped(json, false);
}

export function OrderCreateParametersFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderCreateParameters {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'branch': !exists(json, 'branch') ? undefined : json['branch'],
        'name': json['name'],
        'lsp': json['lsp'],
        'sourceLocaleId': !exists(json, 'source_locale_id') ? undefined : json['source_locale_id'],
        'targetLocaleIds': !exists(json, 'target_locale_ids') ? undefined : json['target_locale_ids'],
        'translationType': !exists(json, 'translation_type') ? undefined : json['translation_type'],
        'tag': !exists(json, 'tag') ? undefined : json['tag'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'styleguideId': !exists(json, 'styleguide_id') ? undefined : json['styleguide_id'],
        'unverifyTranslationsUponDelivery': !exists(json, 'unverify_translations_upon_delivery') ? undefined : json['unverify_translations_upon_delivery'],
        'includeUntranslatedKeys': !exists(json, 'include_untranslated_keys') ? undefined : json['include_untranslated_keys'],
        'includeUnverifiedTranslations': !exists(json, 'include_unverified_translations') ? undefined : json['include_unverified_translations'],
        'category': !exists(json, 'category') ? undefined : json['category'],
        'quality': !exists(json, 'quality') ? undefined : json['quality'],
        'priority': !exists(json, 'priority') ? undefined : json['priority'],
    };
}

export function OrderCreateParametersToJSON(value?: OrderCreateParameters | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'branch': value.branch,
        'name': value.name,
        'lsp': value.lsp,
        'source_locale_id': value.sourceLocaleId,
        'target_locale_ids': value.targetLocaleIds,
        'translation_type': value.translationType,
        'tag': value.tag,
        'message': value.message,
        'styleguide_id': value.styleguideId,
        'unverify_translations_upon_delivery': value.unverifyTranslationsUponDelivery,
        'include_untranslated_keys': value.includeUntranslatedKeys,
        'include_unverified_translations': value.includeUnverifiedTranslations,
        'category': value.category,
        'quality': value.quality,
        'priority': value.priority,
    };
}


