/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Branch,
    BranchFromJSON,
    BranchFromJSONTyped,
    BranchToJSON,
    JobTemplate,
    JobTemplateFromJSON,
    JobTemplateFromJSONTyped,
    JobTemplateToJSON,
    JobTemplateDetails1,
    JobTemplateDetails1FromJSON,
    JobTemplateDetails1FromJSONTyped,
    JobTemplateDetails1ToJSON,
    LocalePreview,
    LocalePreviewFromJSON,
    LocalePreviewFromJSONTyped,
    LocalePreviewToJSON,
    ProjectShort,
    ProjectShortFromJSON,
    ProjectShortFromJSONTyped,
    ProjectShortToJSON,
    UserPreview,
    UserPreviewFromJSON,
    UserPreviewFromJSONTyped,
    UserPreviewToJSON,
} from './';

/**
 * 
 * @export
 * @interface JobTemplateDetails
 */
export interface JobTemplateDetails {
    /**
     * 
     * @type {string}
     * @memberof JobTemplateDetails
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof JobTemplateDetails
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof JobTemplateDetails
     */
    briefing?: string;
    /**
     * 
     * @type {ProjectShort}
     * @memberof JobTemplateDetails
     */
    project?: ProjectShort;
    /**
     * 
     * @type {Branch}
     * @memberof JobTemplateDetails
     */
    branch?: Branch;
    /**
     * 
     * @type {Date}
     * @memberof JobTemplateDetails
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof JobTemplateDetails
     */
    updatedAt?: Date;
    /**
     * 
     * @type {UserPreview}
     * @memberof JobTemplateDetails
     */
    owner?: UserPreview;
    /**
     * 
     * @type {UserPreview}
     * @memberof JobTemplateDetails
     */
    creator?: UserPreview;
    /**
     * 
     * @type {Array<LocalePreview>}
     * @memberof JobTemplateDetails
     */
    locales?: Array<LocalePreview>;
}

export function JobTemplateDetailsFromJSON(json: any): JobTemplateDetails {
    return JobTemplateDetailsFromJSONTyped(json, false);
}

export function JobTemplateDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): JobTemplateDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'briefing': !exists(json, 'briefing') ? undefined : json['briefing'],
        'project': !exists(json, 'project') ? undefined : ProjectShortFromJSON(json['project']),
        'branch': !exists(json, 'branch') ? undefined : BranchFromJSON(json['branch']),
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
        'owner': !exists(json, 'owner') ? undefined : UserPreviewFromJSON(json['owner']),
        'creator': !exists(json, 'creator') ? undefined : UserPreviewFromJSON(json['creator']),
        'locales': !exists(json, 'locales') ? undefined : ((json['locales'] as Array<any>).map(LocalePreviewFromJSON)),
    };
}

export function JobTemplateDetailsToJSON(value?: JobTemplateDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'briefing': value.briefing,
        'project': ProjectShortToJSON(value.project),
        'branch': BranchToJSON(value.branch),
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updated_at': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'owner': UserPreviewToJSON(value.owner),
        'creator': UserPreviewToJSON(value.creator),
        'locales': value.locales === undefined ? undefined : ((value.locales as Array<any>).map(LocalePreviewToJSON)),
    };
}


