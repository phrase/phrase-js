/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Account,
    AccountFromJSON,
    AccountFromJSONTyped,
    AccountToJSON,
    Space1,
    Space1FromJSON,
    Space1FromJSONTyped,
    Space1ToJSON,
    UserPreview,
    UserPreviewFromJSON,
    UserPreviewFromJSONTyped,
    UserPreviewToJSON,
} from './';

/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    slug?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    mainFormat?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    projectImageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    media?: string;
    /**
     * 
     * @type {Account}
     * @memberof Project
     */
    account?: Account;
    /**
     * 
     * @type {Space1}
     * @memberof Project
     */
    space?: Space1;
    /**
     * 
     * @type {UserPreview}
     * @memberof Project
     */
    pointOfContact?: UserPreview;
    /**
     * 
     * @type {Date}
     * @memberof Project
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Project
     */
    updatedAt?: Date;
}

export function ProjectFromJSON(json: any): Project {
    return ProjectFromJSONTyped(json, false);
}

export function ProjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): Project {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'slug': !exists(json, 'slug') ? undefined : json['slug'],
        'mainFormat': !exists(json, 'main_format') ? undefined : json['main_format'],
        'projectImageUrl': !exists(json, 'project_image_url') ? undefined : json['project_image_url'],
        'media': !exists(json, 'media') ? undefined : json['media'],
        'account': !exists(json, 'account') ? undefined : AccountFromJSON(json['account']),
        'space': !exists(json, 'space') ? undefined : Space1FromJSON(json['space']),
        'pointOfContact': !exists(json, 'point_of_contact') ? undefined : UserPreviewFromJSON(json['point_of_contact']),
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
    };
}

export function ProjectToJSON(value?: Project | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'slug': value.slug,
        'main_format': value.mainFormat,
        'project_image_url': value.projectImageUrl,
        'media': value.media,
        'account': AccountToJSON(value.account),
        'space': Space1ToJSON(value.space),
        'point_of_contact': UserPreviewToJSON(value.pointOfContact),
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updated_at': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}


