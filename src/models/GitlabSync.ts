/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GitlabSync
 */
export interface GitlabSync {
    /**
     * 
     * @type {string}
     * @memberof GitlabSync
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof GitlabSync
     */
    projectId?: string;
    /**
     * 
     * @type {number}
     * @memberof GitlabSync
     */
    gitlabProjectId?: number;
    /**
     * 
     * @type {string}
     * @memberof GitlabSync
     */
    gitlabBranchName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GitlabSync
     */
    autoImport?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GitlabSync
     */
    autoImportSecret?: string;
    /**
     * 
     * @type {string}
     * @memberof GitlabSync
     */
    autoImportUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof GitlabSync
     */
    selfHostedApiUrl?: string;
    /**
     * 
     * @type {Date}
     * @memberof GitlabSync
     */
    lastExportedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof GitlabSync
     */
    lastImportedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof GitlabSync
     */
    lastStatus?: string;
}

export function GitlabSyncFromJSON(json: any): GitlabSync {
    return GitlabSyncFromJSONTyped(json, false);
}

export function GitlabSyncFromJSONTyped(json: any, ignoreDiscriminator: boolean): GitlabSync {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'projectId': !exists(json, 'project_id') ? undefined : json['project_id'],
        'gitlabProjectId': !exists(json, 'gitlab_project_id') ? undefined : json['gitlab_project_id'],
        'gitlabBranchName': !exists(json, 'gitlab_branch_name') ? undefined : json['gitlab_branch_name'],
        'autoImport': !exists(json, 'auto_import') ? undefined : json['auto_import'],
        'autoImportSecret': !exists(json, 'auto_import_secret') ? undefined : json['auto_import_secret'],
        'autoImportUrl': !exists(json, 'auto_import_url') ? undefined : json['auto_import_url'],
        'selfHostedApiUrl': !exists(json, 'self_hosted_api_url') ? undefined : json['self_hosted_api_url'],
        'lastExportedAt': !exists(json, 'last_exported_at') ? undefined : (new Date(json['last_exported_at'])),
        'lastImportedAt': !exists(json, 'last_imported_at') ? undefined : (new Date(json['last_imported_at'])),
        'lastStatus': !exists(json, 'last_status') ? undefined : json['last_status'],
    };
}

export function GitlabSyncToJSON(value?: GitlabSync | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'project_id': value.projectId,
        'gitlab_project_id': value.gitlabProjectId,
        'gitlab_branch_name': value.gitlabBranchName,
        'auto_import': value.autoImport,
        'auto_import_secret': value.autoImportSecret,
        'auto_import_url': value.autoImportUrl,
        'self_hosted_api_url': value.selfHostedApiUrl,
        'last_exported_at': value.lastExportedAt === undefined ? undefined : (value.lastExportedAt.toISOString()),
        'last_imported_at': value.lastImportedAt === undefined ? undefined : (value.lastImportedAt.toISOString()),
        'last_status': value.lastStatus,
    };
}


