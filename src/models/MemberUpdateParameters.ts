/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MemberUpdateParameters
 */
export interface MemberUpdateParameters {
    /**
     * Update strategy, can be any of set, add, remove. If provided, it will set, add or remove given spaces, projects and locale ids from users access list.
     * @type {string}
     * @memberof MemberUpdateParameters
     */
    strategy?: string;
    /**
     * Member role, can be any of of Admin, ProjectManager, Developer, Designer, Translator
     * @type {string}
     * @memberof MemberUpdateParameters
     */
    role?: string;
    /**
     * List of project ids the user has access to. 
     * @type {string}
     * @memberof MemberUpdateParameters
     */
    projectIds?: string;
    /**
     * List of locale ids the user has access to.
     * @type {string}
     * @memberof MemberUpdateParameters
     */
    localeIds?: string;
    /**
     * List of default locales for the user.
     * @type {Array<string>}
     * @memberof MemberUpdateParameters
     */
    defaultLocaleCodes?: Array<string>;
    /**
     * List of spaces the user is assigned to.
     * @type {Array<string>}
     * @memberof MemberUpdateParameters
     */
    spaceIds?: Array<string>;
    /**
     * Additional permissions depending on member role. Available permissions are `create_upload` and `review_translations`
     * @type {{ [key: string]: string; }}
     * @memberof MemberUpdateParameters
     */
    permissions?: { [key: string]: string; };
}

export function MemberUpdateParametersFromJSON(json: any): MemberUpdateParameters {
    return MemberUpdateParametersFromJSONTyped(json, false);
}

export function MemberUpdateParametersFromJSONTyped(json: any, ignoreDiscriminator: boolean): MemberUpdateParameters {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'strategy': !exists(json, 'strategy') ? undefined : json['strategy'],
        'role': !exists(json, 'role') ? undefined : json['role'],
        'projectIds': !exists(json, 'project_ids') ? undefined : json['project_ids'],
        'localeIds': !exists(json, 'locale_ids') ? undefined : json['locale_ids'],
        'defaultLocaleCodes': !exists(json, 'default_locale_codes') ? undefined : json['default_locale_codes'],
        'spaceIds': !exists(json, 'space_ids') ? undefined : json['space_ids'],
        'permissions': !exists(json, 'permissions') ? undefined : json['permissions'],
    };
}

export function MemberUpdateParametersToJSON(value?: MemberUpdateParameters | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'strategy': value.strategy,
        'role': value.role,
        'project_ids': value.projectIds,
        'locale_ids': value.localeIds,
        'default_locale_codes': value.defaultLocaleCodes,
        'space_ids': value.spaceIds,
        'permissions': value.permissions,
    };
}


